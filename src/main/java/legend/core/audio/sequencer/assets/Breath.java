package legend.core.audio.sequencer.assets;

import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import legend.core.audio.sequencer.LookupTables;
import legend.game.unpacker.FileData;


public final class Breath {
  private static final int HASH_MUL = 16777619;
  private static final int HASH_BASE = (int)2166136261L;
  private static final int BREATH_COUNT = 240;
  /**
   * 0 - Sine wave
   * 1 - Triangular wave
   * 2 - Double frequency sine wave
   * 3 - Double frequency triangular wave
   */
  private static final float[][] waveforms = new float[4][];
  private static final Int2ObjectMap<Breath> map = new Int2ObjectOpenHashMap<>();

  private final float[] waveform;
  private final boolean lerpInterp;
  private final boolean half;
  private final boolean abs;

  static {
    waveforms[0] = new float[BREATH_COUNT + 3];
    for(int i = 0; i < BREATH_COUNT; i++) {
      waveforms[0][i + 1] = sineWave(i, BREATH_COUNT);
    }
    waveforms[0][BREATH_COUNT + 2] = waveforms[0][1];

    waveforms[1] = new float[BREATH_COUNT + 1];
    for(int i = 0; i < BREATH_COUNT; i++) {
      waveforms[1][i] = triangularWave(i, BREATH_COUNT);
    }

    waveforms[2] = new float[BREATH_COUNT + 3];
    for(int i = 0; i < BREATH_COUNT; i++) {
      waveforms[2][i + 1] = sineWave(i * 2, BREATH_COUNT);
    }
    waveforms[2][BREATH_COUNT + 2] = waveforms[2][1];

    waveforms[3] = new float[BREATH_COUNT + 1];
    for(int i = 0; i < BREATH_COUNT; i++) {
      waveforms[3][i] = triangularWave(i * 2, BREATH_COUNT);
    }


    // Preset 0 - Regular sine wave
    addBreath(new int[] {
      0x80, 0x8D, 0x9D, 0xA5, 0xB3, 0xC1, 0xCE, 0xD4, 0xE0, 0xE9, 0xF1, 0xF5, 0xFA, 0xFE, 0xFF, 0xFF,
      0xFE, 0xFC, 0xF8, 0xF2, 0xED, 0xE4, 0xDA, 0xD4, 0xC7, 0xBA, 0xAC, 0xA4, 0x95, 0x86, 0x7A, 0x6B,
      0x5C, 0x54, 0x46, 0x39, 0x2C, 0x26, 0x1C, 0x13, 0x0E, 0x08, 0x04, 0x01, 0x00, 0x01, 0x02, 0x06,
      0x0B, 0x0F, 0x17, 0x20, 0x2C, 0x32, 0x3F, 0x4D, 0x5B, 0x63, 0x73, 0x7F, 0x80, 0x80, 0x80, 0x00},
      waveforms[0], false, false, false);
    // Preset 1 - Regular triangular wave
    addBreath(new int[] {
      0x80, 0x89, 0x91, 0x9A, 0xA2, 0xAB, 0xB3, 0xBC, 0xC4, 0xCD, 0xD5, 0xDE, 0xE6, 0xEF, 0xF7, 0xFF,
      0xF7, 0xEF, 0xE6, 0xDE, 0xD5, 0xCD, 0xC4, 0xBC, 0xB3, 0xAB, 0xA2, 0x9A, 0x91, 0x89, 0x80, 0x77,
      0x6F, 0x66, 0x5E, 0x55, 0x4D, 0x44, 0x3C, 0x33, 0x2B, 0x22, 0x1A, 0x11, 0x09, 0x00, 0x09, 0x11,
      0x1A, 0x22, 0x2B, 0x33, 0x3C, 0x44, 0x4D, 0x55, 0x5E, 0x66, 0x6F, 0x77, 0x80, 0x80, 0x80, 0x00},
      waveforms[1], true, false, false);
    // Preset 2 - First half of a sine wave
    addBreath(new int[] {
      0x80, 0x8D, 0x9D, 0xA5, 0xB3, 0xC1, 0xCE, 0xD4, 0xE0, 0xE9, 0xF1, 0xF5, 0xFA, 0xFE, 0xFF, 0xFF,
      0xFE, 0xFC, 0xF8, 0xF2, 0xED, 0xE4, 0xDA, 0xD4, 0xC7, 0xBA, 0xAC, 0xA4, 0x95, 0x86, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00},
      waveforms[0], false, true, false);
    // Preset 3 - First half of a triangular wave
    addBreath(new int[] {
      0x80, 0x89, 0x91, 0x9A, 0xA2, 0xAB, 0xB3, 0xBC, 0xC4, 0xCD, 0xD5, 0xDE, 0xE6, 0xEF, 0xF7, 0xFF,
      0xF7, 0xEF, 0xE6, 0xDE, 0xD5, 0xCD, 0xC4, 0xBC, 0xB3, 0xAB, 0xA2, 0x9A, 0x91, 0x89, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00},
      waveforms[1], true, true, false);
    // Preset 4 - Absolute value of the first half of a sine wave at double the frequency
    addBreath(new int[] {
      0x80, 0x9B, 0xB4, 0xCB, 0xDF, 0xEF, 0xFA, 0xFF, 0xFF, 0xFA, 0xEF, 0xDF, 0xCB, 0xB4, 0x9B, 0x80,
      0x9B, 0xB4, 0xCB, 0xDF, 0xEF, 0xFA, 0xFF, 0xFF, 0xFA, 0xEF, 0xDF, 0xCB, 0xB4, 0x9B, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00},
      waveforms[2], false, true, true);
    // Preset 5 - Absolute value of the first half of a triangular wave at double the frequency
    addBreath(new int[] {
      0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0xFF, 0xF0, 0xE0, 0xD0, 0xC0, 0xB0, 0xA0, 0x90,
      0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0xFF, 0xF0, 0xE0, 0xD0, 0xC0, 0xB0, 0xA0, 0x90,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00},
      waveforms[3], true, true, true);
    // Preset 6 - First half of a sine wave at double the frequency
    addBreath(new int[] {
      0x80, 0x9B, 0xB4, 0xCB, 0xDF, 0xEF, 0xFA, 0xFF, 0xFF, 0xFA, 0xEF, 0xDF, 0xCB, 0xB4, 0x9B, 0x80,
      0x65, 0x4B, 0x34, 0x21, 0x11, 0x06, 0x01, 0x00, 0x06, 0x11, 0x21, 0x34, 0x4B, 0x65, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00},
      waveforms[2], false, true, false);
    // Preset 7 - First half of a triangular wave at double the frequency
    addBreath(new int[] {
      0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0xFF, 0xF0, 0xE0, 0xD0, 0xC0, 0xB0, 0xA0, 0x90,
      0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00},
      waveforms[3], true, true, false);
  }

  private Breath(final float[] curve, final boolean lerpInterp, final boolean half, final boolean abs) {
    this.waveform = curve;
    this.lerpInterp = lerpInterp;
    this.half = half;
    this.abs = abs;
  }

  public float get(final int position, final int interpolationIndex, final LookupTables lookupTables) {
    if(this.half) {
      if(position >= BREATH_COUNT / 2) {
        return 0;
      }
    }

    float breath;
    if(this.lerpInterp) {
      breath = this.waveform[position] + (float)interpolationIndex / lookupTables.getInterpolationStep() * (this.waveform[position + 1] - this.waveform[position]);
    } else {
      breath = lookupTables.interpolate(this.waveform, position, interpolationIndex);
    }

    if(this.abs) {
      breath = Math.abs(breath);
    }

    return breath;
  }

  public static Breath get(final FileData data, final int fileId, final int tableIndex) {
    final int hash = hash(data);

    if(map.containsKey(hash)) {
      return map.get(hash);
    }

    throw new RuntimeException("Unknown breath table file: " + fileId + " table: " + tableIndex);
  }

  private static int hash(final int[] data) {
    int hash = HASH_BASE;

    for(final int b : data) {
      hash = (hash ^ b) * HASH_MUL;
    }

    return hash;
  }

  private static int hash(final FileData data) {
    int hash = HASH_BASE;

    for(int i = 0; i < data.size(); i++) {
      hash = (hash ^ data.readUByte(i)) * HASH_MUL;
    }

    return hash;
  }

  private static void addBreath(final int[] data, final float[] curve, final boolean lerpInterp, final boolean half, final boolean abs) {
    final int hash = hash(data);

    map.put(hash, new Breath(curve, lerpInterp, half, abs));
  }

  private static float sineWave(final int index, final int max) {
    return (float)Math.sin(Math.TAU * ((double)index / (double)max));
  }

  private static float triangularWave(final int index, final int max) {
    return (float)(1 - Math.abs(Math.abs(((index % max) + max / 4) / (double)max * 2 - 2) - 1) * 2.0d);
  }
}
