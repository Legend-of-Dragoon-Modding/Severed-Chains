Widescreen patch
Shana
Old: Shana would stack on Dart and Lavitz
New: Shana waits for Lavitz to move before continuing
--- original
+++ modified
@@ -48,12 +48,28 @@
 yield
 call 102, stor[0], stor[8], stor[9], stor[10]
 call 116, stor[24]
# Inside walking loop for LABEL_2 subroutine
+gosub inl[:WAIT_TIME]
 jmp_cmp !=, 0x0, stor[24], inl[:LABEL_4]
 call 294, 0x0, 0x1
 call 97, 0x0
 call 111, 0x0
 return
# Wait for target, stor[25], to not be on queued collision primitive, stor[24]
+WAIT_IN_LINE:
+call 681, stor[25], stor[26]
+jmp_cmp !=, stor[24], stor[26], inl[:RETURN]
+yield
+gosub inl[:WAIT_TIME]
+jmp inl[:WAIT_IN_LINE]
+RETURN:
+return
# If flag 0x79 has been set true, count idle and movement ticks, stor[22], to offset upcoming wait timer
+WAIT_TIME:
+call 3, 0x79, stor[26]
+jmp_cmp ==, 0, stor[26], inl[:RETURN]
+incr stor[22]
+return
 LABEL_5:
 mov var[64][stor[28]], stor[28]
 call 102, stor[28], stor[29], stor[30], stor[31]
@@ -149,14 +163,19 @@
 mov 0x17, stor[24]
 gosub inl[:LABEL_2]
 mov 0x2e, stor[24]
# Wait for Lavitz to move
+mov var[64][2], stor[25]
+mov 0, stor[22]
+gosub inl[:WAIT_IN_LINE]
 gosub inl[:LABEL_2]
 mov 0xf, stor[24]
+gosub inl[:WAIT_IN_LINE]
 gosub inl[:LABEL_2]
 LABEL_11:
 yield
 call 3, 0x79, stor[24]
 jmp_cmp ==, 0x0, stor[24], inl[:LABEL_11]
 mov 0x3c, stor[24]
# Reduce wait time to match retail
+jmp_cmp >, stor[22], stor[24], inl[:NO_WAIT]
+sub stor[22], stor[24]
 wait stor[24]
+NO_WAIT:
 mov 0x18, stor[24]
 gosub inl[:LABEL_2]
 LABEL_12:
