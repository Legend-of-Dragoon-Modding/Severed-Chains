entrypoint :ENTRYPOINT_0
entrypoint :ENTRYPOINT_1
entrypoint :ENTRYPOINT_2
entrypoint :ENTRYPOINT_3
entrypoint :ENTRYPOINT_4
entrypoint :ENTRYPOINT_5
entrypoint :ENTRYPOINT_6
entrypoint :ENTRYPOINT_7
entrypoint :ENTRYPOINT_8
entrypoint :ENTRYPOINT_9
entrypoint :ENTRYPOINT_10
entrypoint :ENTRYPOINT_11
entrypoint :ENTRYPOINT_12
entrypoint :ENTRYPOINT_13
entrypoint :ENTRYPOINT_14
entrypoint :ENTRYPOINT_15
data 0x10c
data 0xf00ff2d
data 0x49

; SUBROUTINE
LABEL_0:
yield
call Battle::scriptAnimationHasFinished, stor[0], stor[8] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_0] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_1:
yield
call Battle::scriptAnimationHasFinished, stor[28], stor[8] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_1] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_2:
jmp_cmp &, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_3] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_4] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[8], inl[:LABEL_4] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0x0, stor[8], inl[:LABEL_4] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[28], MAX_HP, stor[9] ; bentIndex, statIndex, value
div 0x4, stor[9] ; amount, operand
jmp_cmp >=, stor[9], stor[8], inl[:LABEL_6] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x40, stor[8], inl[:LABEL_5] ; operand, left, right, addr
LABEL_3:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0x0 ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_4:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xe ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x0 ; bentIndex, loop
return
LABEL_5:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xa, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xa ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_6:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xb, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xb ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
LABEL_7:
return

; SUBROUTINE
LABEL_8:
call Battle::scriptGetBentSlot, stor[28], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[8], var[128 + stor[10]][5] ; source, dest
mov 0x5, var[128 + stor[10]][0] ; source, dest
call Battle::scriptSetBentStat, stor[30], stor[8], SPELL_ID ; bentIndex, value, statIndex
call Battle::scriptSetTempSpellStats, stor[30] ; bentIndex
mov stor[8], var[45][119] ; source, dest
call Battle::scriptGetBentStat, stor[30], SPELL_TARGET_TYPE, stor[9] ; bentIndex, statIndex, value
jmp_cmp &, 0x80, stor[9], inl[:LABEL_9] ; operand, left, right, addr
call Battle::scriptCheckPhysicalHit, stor[30], stor[28], stor[9] ; attackerIndex, defenderIndex, hit
jmp inl[:LABEL_10] ; addr
LABEL_9:
call Battle::scriptCheckSpellOrStatusHit, stor[30], stor[28], stor[9] ; attackerIndex, defenderIndex, hit
LABEL_10:
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_12] ; operand, left, right, addr
gosub inl[:LABEL_13] ; addr
mov stor[9], var[45][119] ; source, dest
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_11] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[30], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[9], inl[:LABEL_11] ; operand, left, right, addr
shr 0x1, stor[8] ; shift, val
LABEL_11:
mov var[45][119], stor[9] ; source, dest
return
LABEL_12:
mov 0xffffffff, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_13:
call Battle::scriptGetBentStat, stor[30], SPELL_TARGET_TYPE, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x80, stor[8], inl[:LABEL_14] ; operand, left, right, addr
call Battle::scriptPhysicalAttack, stor[30], stor[28], stor[8], stor[10] ; attackerIndex, defenderIndex, damage, specialEffects
return
LABEL_14:
call Battle::scriptDragoonMagicStatusItemAttack, stor[30], stor[28], var[45][119], stor[8], stor[10] ; attackerIndex, defenderIndex, spellId, damage, specialEffects
return

; SUBROUTINE
LABEL_15:
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
or stor[9], var[45][246] ; or, operand
return

; SUBROUTINE
LABEL_16:
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
neg stor[9] ; operand
decr stor[9] ; operand
and stor[9], var[45][246] ; and, operand
return
data 0x10c
data 0x2000008
data 0x70341
data 0x1000000
data 0x200000
data 0x3071c00
data 0x9000007
data 0x11b
data 0x2000008
data 0x49
data 0x357
data 0x200001c
data 0xa
data 0x2000008

; SUBROUTINE
LABEL_17:
yield
jmp_cmp &, 0x200000, stor[stor[stor[0], 28], 7], inl[:LABEL_17] ; operand, left, right, addr
yield
yield
return

; SUBROUTINE
LABEL_18:
yield
mov var[49], stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
mov 0x0, stor[11] ; source, dest
mov 0x0, stor[12] ; source, dest
mov 0x0, stor[8] ; source, dest
LABEL_19:
mov var[48][stor[8]], stor[12] ; source, dest
mov stor[stor[stor[0], 12], 7], stor[10] ; source, dest
and 0x200000, stor[10] ; and, operand
or stor[10], stor[11] ; or, operand
incr stor[8] ; operand
jmp_cmp >, stor[9], stor[8], inl[:LABEL_19] ; operand, left, right, addr
jmp_cmp !=, 0x0, stor[11], inl[:LABEL_18] ; operand, left, right, addr
yield
yield
return

; SUBROUTINE
LABEL_20:
yield
call Battle::scriptIsFloatingNumberOnScreen, stor[8] ; onScreen
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_20] ; operand, left, right, addr
return
data 0x1730338
data 0x200001c
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x10c
data 0x700092d
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x210
data 0x1000000
data 0xffffff00
data 0x2000008
data 0xa80338
data 0x200001c
data 0x2000008
data 0x1000000
data 0x5
data 0x49

; SUBROUTINE
LABEL_21:
jmp_cmp >, 0x0, var[45][64], inl[:LABEL_27] ; operand, left, right, addr
call Battle::scriptSetBentStat, stor[30], var[45][64], ADDITION_HITS ; bentIndex, value, statIndex
call Battle::scriptPhysicalAttack, stor[30], stor[28], stor[9], stor[10] ; attackerIndex, defenderIndex, damage, specialEffects
mov stor[10], var[45][241] ; source, dest
call Battle::scriptGetBentStat, stor[30], STATUS, stor[11] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[11], inl[:LABEL_22] ; operand, left, right, addr
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_22] ; operand, left, right, addr
shr 0x1, stor[9] ; shift, val
LABEL_22:
call Battle::scriptGetBentSlot, stor[30], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[10] ; amount, operand
mov var[45][stor[10]], stor[10] ; source, dest
jmp_cmp !&, 0x2, stor[10], inl[:LABEL_23] ; operand, left, right, addr
jmp_cmp &, 0x4, stor[10], inl[:LABEL_23] ; operand, left, right, addr
shr 0x1, stor[9] ; shift, val
LABEL_23:
jmp_cmp >=, 0x0, stor[9], inl[:LABEL_25] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[30], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[10] ; amount, operand
jmp_cmp !&, 0x1, var[45][stor[10]], inl[:LABEL_25] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[30], CURRENT_HP, stor[10] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat2, stor[30], MAX_HP, stor[11] ; bentIndex, statIndex, value
div 0x2, stor[11] ; amount, operand
jmp_cmp <, stor[11], stor[10], inl[:LABEL_25] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[30], MAX_HP, stor[11] ; bentIndex, statIndex, value
div 0x4, stor[11] ; amount, operand
jmp_cmp >=, stor[11], stor[10], inl[:LABEL_24] ; operand, left, right, addr
mul 0x3, stor[9] ; amount, operand
shr 0x1, stor[9] ; shift, val
jmp inl[:LABEL_25] ; addr
LABEL_24:
mul 0x2, stor[9] ; amount, operand
LABEL_25:
jmp_cmp >=, 0x3b9ac9ff, stor[9], inl[:LABEL_26] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[9] ; source, dest
LABEL_26:
return
LABEL_27:
mov 0xffffffff, stor[9] ; source, dest
mov 0xffffffff, stor[10] ; source, dest
return
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff43
data 0x49
data 0x10c
data 0x200000d
data 0x208
data 0x7000d32
data 0x200001c
data 0x70341
data 0x1000000
data 0x2
data 0x3071c00
data 0x900000b
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff32
data 0x11b
data 0x200000d
data 0x208
data 0xa
data 0x200000e
data 0x40341
data 0x5000033
data 0x200000d
data 0x900ffed
data 0x49
data 0x30a
data 0x2
data 0x2000008
data 0x900002d
data 0x148
data 0x9000007
data 0x30a
data 0x2
data 0x9000027
data 0x2000008
data 0x49
data 0xa90338
data 0x2000008
data 0x5
data 0x2000009
data 0x70341
data 0x1000000
data 0x4000
data 0x2000009
data 0x900000a
data 0x208
data 0x9
data 0x2000009
data 0x140
data 0x9000005
data 0xa70238
data 0x2000008
data 0x2000009
data 0x60341
data 0x1000000
data 0x2
data 0x3070800
data 0x900000d
data 0x20c0238
data 0x2000008
data 0xa09000e
data 0x2050338
data 0x2000008
data 0xa09001f
data 0xa09001f
data 0x49
data 0x20c0238
data 0x2000008
data 0xa090010
data 0x49
data 0x0
data 0x0
data 0x8
data 0x9
data 0xd
data 0xb
data 0xa
data 0x9
data 0xc
data 0x8
data 0xc
data 0x8
data 0x8
data 0x9
data 0xb
data 0xb
data 0x8
data 0x9
data 0xc
data 0x8
data 0xb
data 0x7
data 0x1800
data 0x1800
data 0x1000
data 0xe00
data 0x1600
data 0x1300
data 0xe00
data 0x2000
data 0x1300
data 0x1500
data 0x49

; SUBROUTINE
LABEL_28:
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_X, stor[24] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_Y, stor[25] ; bentIndex, statIndex, value
mul 0x64, stor[24] ; amount, operand
mul 0x64, stor[25] ; amount, operand
neg stor[25] ; operand
mov 0x0, stor[26] ; source, dest
call Battle::scriptGetBentPos, stor[28], stor[14], stor[15], stor[16] ; bentIndex, x, y, z
add stor[14], stor[24] ; amount, operand
add stor[15], stor[25] ; amount, operand
add stor[16], stor[26] ; amount, operand
return
data 0x1730338
data 0x200001c
data 0x2000008
data 0x0
data 0x208
data 0x200001e
data 0x10040880
data 0x49

; SUBROUTINE
LABEL_29:
jmp_cmp >, 0x0, var[45][224], inl[:LABEL_30] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp !&, 0x10, stor[8], inl[:LABEL_30] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[8] ; amount, operand
or 0xf00, var[45][stor[8]] ; or, operand
LABEL_30:
return

; SUBROUTINE
LABEL_31:
gosub inl[:LABEL_18] ; addr
mov 0x0, stor[9] ; source, dest
LABEL_32:
mov var[34][stor[9]], stor[28] ; source, dest
call Battle::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp !&, 0x400, var[128 + stor[8]][7], inl[:LABEL_33] ; operand, left, right, addr
fork_reenter stor[28], 0x4, 0x0 ; index, entrypoint, stor[32] value
LABEL_33:
incr stor[9] ; operand
jmp_cmp <, stor[9], var[35], inl[:LABEL_32] ; operand, left, right, addr
gosub inl[:LABEL_18] ; addr
return
data 0x0
data 0x60341
data 0x4
data 0xf00f52d
data 0x900ffff
data 0x49
data 0xa90338
data 0x200001c
data 0x8
data 0x2000008
data 0x210
data 0x80
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_34:
call SEffe::scriptGetAdditionOverlayActiveStatus, 0x0, stor[8] ; type, state
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_35] ; operand, left, right, addr
mov var[45][104], stor[8] ; source, dest
return
LABEL_35:
mov 0xffffffff, stor[8] ; source, dest
return

; SUBROUTINE TABLE
LABEL_36:
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_46
rel :JMP_aec_47
rel :JMP_aec_48
rel :JMP_aec_49
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_55
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_71
rel :JMP_aec_71
rel :JMP_aec_0
rel :JMP_aec_71
rel :JMP_aec_0
rel :JMP_aec_47
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_91
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_128
rel :JMP_aec_128
rel :JMP_aec_128
rel :JMP_aec_131
rel :JMP_aec_132
rel :JMP_aec_132
rel :JMP_aec_134
rel :JMP_aec_71
rel :JMP_aec_71
rel :JMP_aec_48
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_257
rel :JMP_aec_258
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_272
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
rel :JMP_aec_0
JMP_aec_0:
deallocate
data 0x140
data 0x9000196
data 0x50
JMP_aec_128:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[30], 0xfff03, 0x8, 0xc8, 0x3, 0x200, 0x0, 0x2 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[30], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
deallocate
JMP_aec_131:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[30], 0xfff03, 0x8, 0xc8, 0x3, 0x100, 0x0, 0x3 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[30], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
deallocate
JMP_aec_132:
call SEffe::scriptAllocateParticleEffect, stor[18], stor[30], 0xfff03, 0x10, 0xc8, 0x3, 0x100, 0x0, 0x4 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[30], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xf ; effectIndex, ticks
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
deallocate
JMP_aec_134:
deallocate
JMP_aec_71:
deallocate
data 0x210538
data 0x6
data 0x1000000
data 0xfff44800
data 0x1000000
data 0xfffc1800
data 0x0
data 0x200001c
data 0x220538
data 0x6
data 0x0
data 0x1000000
data 0xfffc7c00
data 0x0
data 0x200001c
data 0x0
data 0x2ea0938
data 0x2000012
data 0x200001c
data 0xfff2a
data 0x14
data 0x9c4
data 0x14
data 0x100
data 0x0
data 0x12
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x400
data 0x400
data 0x400
data 0x2210538
data 0x2000012
data 0x200001c
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2590238
data 0x2000013
data 0xfff26
data 0x2210538
data 0x2000013
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe0c
data 0x2250538
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x14
data 0x1c2
data 0x1c2
data 0x1c2
data 0x2270538
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xc8
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2590238
data 0x2000015
data 0xfff26
data 0x2210538
data 0x2000015
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe0c
data 0x2250538
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x14
data 0x200
data 0x200
data 0x200
data 0x2270538
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xc8
data 0x0
data 0x0
data 0x0
data 0x49
data 0x208
data 0x1b
data 0x2000017
data 0x102
data 0x2000017
data 0x2590238
data 0x2000014
data 0xfff26
data 0x2210538
data 0x2000014
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe70
data 0x2250538
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x3e8
data 0x3e8
data 0x3e8
data 0x23f0738
data 0x2000014
data 0x10e
data 0x10e
data 0x10e
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x2270538
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xc8
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2590238
data 0x2000016
data 0xfff26
data 0x2210538
data 0x2000016
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe70
data 0x2250538
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x23f0738
data 0x2000016
data 0x10e
data 0x10e
data 0x10e
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x2270538
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xd2
data 0x0
data 0x0
data 0x0
data 0x49
data 0x2450638
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x5
data 0x28
data 0x28
data 0x28
data 0x208
data 0x5
data 0x2000017
data 0x102
data 0x2000017
data 0x2400638
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x12
data 0x1000
data 0x1000
data 0x1000
data 0x2450638
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x2450638
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x12
data 0x1000
data 0x1000
data 0x1000
data 0x2450638
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x2450638
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x0
data 0x208
data 0x19
data 0x2000017
data 0x102
data 0x2000017
data 0x153
data 0x2000012
data 0x153
data 0x2000013
data 0x0
data 0x153
data 0x2000014
data 0x153
data 0x2000015
data 0x0
data 0x50
JMP_aec_47:
deallocate
JMP_aec_49:
call Battle::allocateBillboardSpriteEffect, stor[18], 0xfff40 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x2, 0x900, 0x900, 0x900 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAllocateParticleEffect, stor[20], 0xffffffff, 0x200002, 0x18, 0xa, 0x1, 0x800, 0xd087f00, 0x27 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x64, 0x80, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[20], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[20], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[20], stor[0], 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x4, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddConstantColourScalerAttachment, stor[20], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x0, var[45][128] ; source, dest
deallocate
JMP_aec_48:
deallocate
JMP_aec_46:
deallocate
JMP_aec_55:
deallocate
JMP_aec_257:
deallocate
JMP_aec_258:
deallocate
JMP_aec_272:
deallocate
JMP_aec_91:
deallocate

; FORK JMP
LABEL_37:
jmp_table stor[31], inl[:LABEL_36] ; index, table
data 0x50

; SUBROUTINE
LABEL_38:
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z

; SUBROUTINE
LABEL_39:
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x800, 0x800, 0x800 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[0], stor[stor[stor[0], 18], 30] ; source, dest
mov var[45][128], stor[stor[stor[0], 18], 31] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_37] ; scriptIndex, address
return
data 0x208
data 0x1
data 0x2000008
data 0x102
data 0x2000017
data 0x10c
data 0x2000008
data 0x1

; SUBROUTINE
LABEL_40:
yield
jmp_cmp !&, 0x4, var[58], inl[:LABEL_40] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0xffffffff, var[128 + stor[8]][0] ; source, dest
mov 0xffffffff, var[128 + stor[8]][1] ; source, dest
mov 0xffffffff, var[128 + stor[8]][2] ; source, dest
mov 0xffffffff, var[128 + stor[8]][3] ; source, dest
mov 0xffffffff, var[128 + stor[8]][4] ; source, dest
mov 0xffffffff, var[128 + stor[8]][5] ; source, dest
mov 0x0, var[128 + stor[8]][6] ; source, dest
mov 0x0, var[128 + stor[8]][7] ; source, dest
return

; SUBROUTINE
LABEL_41:
yield
jmp_cmp !&, 0x10, var[58], inl[:LABEL_41] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_42:
gosub inl[:LABEL_31] ; addr
gosub inl[:LABEL_55] ; addr
gosub inl[:LABEL_18] ; addr
gosub inl[:LABEL_20] ; addr
call Battle::scriptFinishBentTurn, stor[0] ; bentIndex
return

; SUBROUTINE
LABEL_43:
yield
jmp_cmp !=, 0x0, var[45][183], inl[:LABEL_43] ; operand, left, right, addr
gosub inl[:LABEL_18] ; addr
mov 0x20, var[45][252] ; source, dest
mov 0x0, var[45][148] ; source, dest
call Battle::scriptSetBentStat, stor[0], 0x0, GUARD ; bentIndex, value, statIndex
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[9] ; source, dest
mov stor[9], stor[10] ; source, dest
and 0x3, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_44] ; operand, left, right, addr
sub 0x1, var[128 + stor[8]][7] ; amount, operand
LABEL_44:
mov stor[10], stor[9] ; source, dest
and 0xc, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_45] ; operand, left, right, addr
sub 0x4, var[128 + stor[8]][7] ; amount, operand
LABEL_45:
mov 0x0, stor[8] ; source, dest
gosub inl[:LABEL_239] ; addr
yield
yield
yield
jmp_cmp !&, 0x40, stor[7], inl[:LABEL_46] ; operand, left, right, addr
mov 0x1, stor[8] ; source, dest
jmp inl[:LABEL_47] ; addr
LABEL_46:
gosub inl[:LABEL_48] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_47] ; operand, left, right, addr
yield
gosub inl[:LABEL_50] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_47] ; operand, left, right, addr
gosub inl[:LABEL_52] ; addr
LABEL_47:
return

; SUBROUTINE
LABEL_48:
mov 0x0, stor[8] ; source, dest
call Battle::scriptGetBentSlot, stor[0], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[10]][7], stor[9] ; source, dest
and 0x30, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_49] ; operand, left, right, addr
sub 0x10, var[128 + stor[10]][7] ; amount, operand
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0xe, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
gosub inl[:LABEL_70] ; addr
mov 0x1e, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptResumeAnimation, stor[0] ; bentIndex
mov 0x1, stor[8] ; source, dest
LABEL_49:
return

; SUBROUTINE
LABEL_50:
mov 0x0, stor[8] ; source, dest
call Battle::scriptGetBentStat2, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x10, stor[9], inl[:LABEL_51] ; operand, left, right, addr
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0xd, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
gosub inl[:LABEL_70] ; addr
mov 0x1e, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptResumeAnimation, stor[0] ; bentIndex
mov 0x1, stor[8] ; source, dest
LABEL_51:
return

; SUBROUTINE
LABEL_52:
mov 0x0, stor[11] ; source, dest
LABEL_53:
mov var[32][stor[11]], stor[10] ; source, dest
call Battle::scriptGetBentSlot, stor[10], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp !&, 0x80, var[45][stor[9]], inl[:LABEL_54] ; operand, left, right, addr
and 0xff7f, var[45][stor[9]] ; and, operand
or 0x10000, var[45][stor[9]] ; or, operand
LABEL_54:
incr stor[11] ; operand
jmp_cmp <, stor[11], var[33], inl[:LABEL_53] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_55:
mov 0x0, stor[11] ; source, dest
LABEL_56:
mov var[32][stor[11]], stor[28] ; source, dest
call Battle::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
gosub inl[:LABEL_213] ; addr
incr stor[11] ; operand
jmp_cmp <, stor[11], var[33], inl[:LABEL_56] ; operand, left, right, addr
return
data 0x30242
data 0x2000008
data 0x9000029

; SUBROUTINE
LABEL_57:
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0xfd, 0x8b, 0x15 ; effectIndex, parentIndex, ticks, destR, destG, destB
jmp inl[:LABEL_60] ; addr

; SUBROUTINE
LABEL_58:
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0xd5, 0xfd, 0x15 ; effectIndex, parentIndex, ticks, destR, destG, destB
jmp inl[:LABEL_60] ; addr

; SUBROUTINE
LABEL_59:
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0x19, 0x82, 0xfd ; effectIndex, parentIndex, ticks, destR, destG, destB
LABEL_60:
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0xc00, 0xc00 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0xfffffa00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[0], 0xfff20, 0x18, 0x10, 0x4, 0x400, 0xc7f00, 0x2c ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], stor[0], 0x0, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[19], stor[0], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x18 ; effectIndex, ticks
return
LABEL_61:
data 0x0
data 0x0
data 0x0
data 0x0
data 0x1
data 0x1
data 0x9
data 0x9
data 0x1
data 0x1
data 0x9
data 0x9
LABEL_62:
data 0xc2
LABEL_63:
data 0xc2
LABEL_64:
data 0xc2
LABEL_65:
data 0xc2
LABEL_66:
data 0x0
LABEL_67:
data 0x0
LABEL_68:
data 0x0
LABEL_69:
data 0x0

; SUBROUTINE
LABEL_70:
call Battle::scriptAllocateEmptyEffectManagerChild, stor[11] ; effectIndex
mov stor[8], stor[stor[stor[0], 11], 8] ; source, dest
mov stor[9], stor[stor[stor[0], 11], 9] ; source, dest
mov stor[10], stor[stor[stor[0], 11], 10] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[11], inl[:LABEL_71] ; scriptIndex, address
return

; FORK JMP
LABEL_71:
wait stor[10] ; frames
call Scus94491BpeSegment_8002::scriptGetFreeTextboxIndex, stor[11] ; textboxIndex
call Scus94491BpeSegment_8002::scriptAddTextbox, stor[11], 0x1121, 0xa0, 0x32, 0x1c, 0x1, inl[:LABEL_72[:LABEL_72[stor[8]]]] ; index, packedData, x, y, width, height, text
wait stor[9] ; frames
call Scus94491BpeSegment_8002::scriptDeallocateTextbox, stor[11] ; index
yield
deallocate
LABEL_72:
rel :PTR_22a0_0
rel :PTR_22a0_1
rel :PTR_22a0_2
rel :PTR_22a0_3
rel :PTR_22a0_4
rel :PTR_22a0_5
rel :PTR_22a0_6
rel :PTR_22a0_7
rel :PTR_22a0_8
rel :PTR_22a0_9
rel :PTR_22a0_10
rel :PTR_22a0_11
rel :PTR_22a0_12
rel :PTR_22a0_13
rel :PTR_22a0_14
PTR_22a0_0:
data str[<sauto=0><arrow=0>        Item Stolen!        ]
data 0x1c
data 0x1
PTR_22a0_1:
data str[<sauto=0><arrow=0>        100G Stolen!        ]
data 0x1c
data 0x1
PTR_22a0_2:
data str[<sauto=0><arrow=0>       Couldn't Steal!      ]
data 0x1c
data 0x1
PTR_22a0_3:
data str[<sauto=0><arrow=0>        Got it back!        ]
data 0x1c
data 0x1
PTR_22a0_4:
data str[<sauto=0><arrow=0>         HP recovers        ]
data 0x1c
data 0x1
PTR_22a0_5:
data str[<sauto=0><arrow=0>         Run away!          ]
data 0x1c
data 0x1
PTR_22a0_6:
data str[<sauto=0><arrow=0>          Defense           ]
data 0x1c
data 0x1
PTR_22a0_7:
data str[<sauto=0><arrow=0>   Physical Attack Barrier  ]
data 0x1c
data 0x1
PTR_22a0_8:
data str[<sauto=0><arrow=0>   Magical Attack barrier   ]
data 0x1c
data 0x1
PTR_22a0_9:
data str[<sauto=0><arrow=0>          Power up          ]
data 0x1c
data 0x1
PTR_22a0_10:
data str[<sauto=0><arrow=0>          Confused          ]
data 0x1c
data 0x1
PTR_22a0_11:
data str[<sauto=0><arrow=0>      Charging Spirit       ]
data 0x1c
data 0x1
PTR_22a0_12:
data str[<sauto=0><arrow=0>      All-out Attack!       ]
data 0x1c
data 0x1
PTR_22a0_13:
data str[<sauto=0><arrow=0>          Stunned           ]
data 0x1c
data 0x1
PTR_22a0_14:
data str[<sauto=0><arrow=0>        Cannot Move         ]
data 0x1c
data 0x1

; SUBROUTINE
LABEL_73:
mov var[45][203], stor[8] ; source, dest
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_74] ; operand, left, right, addr
mov 0x24, var[45][252] ; source, dest
call Battle::scriptGetBobjModelPartCount, stor[28], stor[23] ; bobjIndex, partCount
call SEffe::scriptAllocateParticleEffect, stor[15], stor[28], 0xfff18, stor[23], 0x0, 0x1, 0x0, 0x40000, 0x40 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[15], 0xffffffff, 0x320, 0x320, 0x320 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[15], 0xffffffff, 0x4, 0xc80, 0xc80, 0xc80 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[15], 0xf ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[16], stor[28], 0xfff26, stor[23], 0x0, 0x1, 0x0, 0x4060000, 0x40 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[16], 0xffffffff, 0x190, 0x190, 0x190 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[16], 0xffffffff, 0x6, 0x708, 0x708, 0x708 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptSetRelativeColour, stor[16], 0xffffffff, 0x64, 0x1e, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[16], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[16], 0xf ; effectIndex, ticks
LABEL_74:
mov var[45][252], stor[8] ; source, dest
gosub inl[:LABEL_8] ; addr
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
return
data 0x49

; SUBROUTINE
JMP_7d70_9:
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x5, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x2 ; bentIndex, animIndex
mov 0x6, stor[23] ; source, dest
mov 0xfffffc00, stor[24] ; source, dest
LABEL_75:
add 0x100, stor[24] ; amount, operand
call Battle::scriptSetBentRotationY, stor[0], stor[24] ; bentIndex, y
yield
while stor[23], inl[:LABEL_75] ; counter, addr
call Battle::scriptSetBentRotationY, stor[0], 0x400 ; bentIndex, y
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::FUN_800cbb00, stor[0], stor[0], 0xc, 0xfffff8f8, 0x0, 0x0 ; bentIndex0, bentIndex1, ticks, x, y, z
call SEffe::scriptAllocateParticleEffect, stor[18], stor[0], 0xfff03, 0x8, 0xc8, 0x3, 0x100, 0x4124000, 0x3 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x4f, 0x45, 0x38 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetParticleAcceleration, 0x0, stor[18], 0x800, 0x0, 0x0, 0x100 ; mode, effectIndex, accelerationX, accelerationY, accelerationZ, accelerationScale
call SEffe::scriptAddLifespanAttachment, stor[18], 0x12 ; effectIndex, ticks
mov 0xf, stor[8] ; source, dest
wait stor[8] ; frames
gosub inl[:LABEL_241] ; addr
call Battle::scriptSetBentDead, stor[0], 0x1 ; bentIndex, dead
call Battle::FUN_800cb618, stor[0], 0x0 ; bentIndex, set
return

; SUBROUTINE
JMP_7d70_0:
gosub inl[:LABEL_158] ; addr
mov 0xfffff510, stor[8] ; source, dest
gosub inl[:LABEL_160] ; addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x10 ; bentIndex, animIndex
call Battle::scriptPlayBentSound, 0x2, stor[0], 0x1, 0x0, 0x0, 0x11, 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
call Battle::scriptPlayBentSound, 0x2, stor[0], 0x4, 0x0, 0x0, 0x15, 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
mov 0x15, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x200, 0xfffffe00, 0xfffff600 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x31, var[45][128] ; source, dest
gosub inl[:LABEL_39] ; addr
mov 0x21, var[45][252] ; source, dest
mov stor[0], stor[30] ; source, dest
gosub inl[:LABEL_73] ; addr
gosub inl[:LABEL_159] ; addr
call Battle::scriptStopBentSound, 0x2, stor[0], 0x1, 0x3 ; unused, bentIndex, soundIndex, mode
call Battle::scriptStopBentSound, 0x2, stor[0], 0x4, 0x3 ; unused, bentIndex, soundIndex, mode
gosub inl[:LABEL_161] ; addr
return

; SUBROUTINE
JMP_7d70_1:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[9]][7], stor[10] ; source, dest
shr 0x18, stor[10] ; shift, val
jmp_cmp !=, 0x0, stor[10], inl[:JMP_7d70_0] ; operand, left, right, addr
gosub inl[:LABEL_82] ; addr
rand 0x64, stor[8] ; bound, dest
jmp_cmp <, 0x64, stor[8], inl[:LABEL_76] ; operand, left, right, addr
mov 0, reg[0] ; null item, select a random one to steal
call Battle::scriptTakeItem, reg[0], reg[10] ; itemId, itemTaken
jmp_cmp ==, 0, reg[10], inl[:LABEL_76] ; operand, left, right, addr
mov 0x0, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
gosub inl[:LABEL_84] ; addr
jmp inl[:LABEL_77] ; addr
LABEL_76:
gosub inl[:LABEL_85] ; addr
LABEL_77:
gosub inl[:LABEL_86] ; addr
return

; SUBROUTINE
JMP_7d70_2:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[9]][7], stor[10] ; source, dest
shr 0x18, stor[10] ; shift, val
jmp_cmp !=, 0x0, stor[10], inl[:JMP_7d70_0] ; operand, left, right, addr
gosub inl[:LABEL_82] ; addr
rand 0x64, stor[8] ; bound, dest
jmp_cmp <, 0x64, stor[8], inl[:LABEL_78] ; operand, left, right, addr
mov var[5], stor[8] ; source, dest
jmp_cmp >, 0x64, stor[8], inl[:LABEL_78] ; operand, left, right, addr
sub 0x64, stor[8] ; amount, operand
mov stor[8], var[5] ; source, dest
mov 0x1, stor[8] ; source, dest
shl 0x18, stor[8] ; shift, val
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
or stor[8], var[128 + stor[9]][7] ; or, operand
mov 0x1, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
gosub inl[:LABEL_84] ; addr
jmp inl[:LABEL_79] ; addr
LABEL_78:
gosub inl[:LABEL_85] ; addr
LABEL_79:
gosub inl[:LABEL_86] ; addr
return

; FORK JMP
LABEL_80:
call SEffe::scriptGetRelativePosition, stor[0], 0xffffffff, stor[10], stor[11], stor[12] ; bobjIndex, parentIndex, x, y, z
sub 0x200, stor[11] ; amount, operand
call Battle::scriptGetBentPos, stor[28], stor[20], stor[21], stor[22] ; bentIndex, x, y, z
sub 0x300, stor[21] ; amount, operand
add 0x150, stor[22] ; amount, operand
call Battle::allocateBillboardSpriteEffect, stor[18], 0xfff25 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[20], stor[21], stor[22] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], stor[18], 0x0, 0xfffffe00, 0xfffffe00, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x16, 0xff, 0x20, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call Battle::allocateBillboardSpriteEffect, stor[19], 0xfff17 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0xfffffdb0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x130, 0x130, 0x130 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x16, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[19], 0x25 ; effectIndex, ticks
call Battle::allocateBillboardSpriteEffect, stor[19], 0xfff18 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x250, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x130, 0x130, 0x130 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x16, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[19], 0x25 ; effectIndex, ticks
call Battle::allocateBillboardSpriteEffect, stor[19], 0xfff17 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x0, 0xfffffdb0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x130, 0x130, 0x130 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x16, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[19], 0x25 ; effectIndex, ticks
call Battle::allocateBillboardSpriteEffect, stor[19], 0xfff18 ; effectIndex, flags
call SEffe::FUN_801156f8, stor[19], stor[18], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, 0x0, 0x0, 0x250 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x130, 0x130, 0x130 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0x16, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[19], 0x25 ; effectIndex, ticks
mov 0x16, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAllocateParticleEffect, stor[17], stor[18], 0xfff3e, 0x20, 0x40, 0xc, 0x200, 0x0, 0x37 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[17], 0xffffffff, stor[20], stor[21], stor[22] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[17], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[17], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[17], 0xffffffff, 0x16, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddRelativePositionScalerTicks1, stor[17], 0xffffffff, 0xf, stor[10], stor[11], stor[12] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptUpdateParabolicPositionScalerAttachment, stor[17], 0xffffffff, 0x0, 0x2000, 0x0 ; effectIndex, unused, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddLifespanAttachment, stor[17], 0xf ; effectIndex, ticks
call SEffe::scriptAddRelativePositionScalerTicks1, stor[18], 0xffffffff, 0xf, stor[10], stor[11], stor[12] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptUpdateParabolicPositionScalerAttachment, stor[18], 0xffffffff, 0x0, 0x2000, 0x0 ; effectIndex, unused, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddLifespanAttachment, stor[18], 0xf ; effectIndex, ticks
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; FORK JMP
LABEL_81:
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff03, 0x4, 0x10, 0x2, 0xa0, 0x147f23, 0x0 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
deallocate

; SUBROUTINE
LABEL_82:
call Battle::scriptGetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0xfffffe0c, 0xfffffaec, 0xfffffed4 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_81] ; scriptIndex, address
mov 0x7, stor[23] ; source, dest
wait stor[23] ; frames
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x8d, var[44] ; source, dest
call Battle::scriptBentLookAtBent, stor[0], stor[28] ; bentIndexToTurn, bentIndexTarget
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x2 ; bentIndex, animIndex
call Battle::FUN_800cbb00, stor[0], stor[28], 0x14, 0xfffff510, 0x0, 0x0 ; bentIndex0, bentIndex1, ticks, x, y, z
call Battle::scriptPlayBentSound, 0x2, stor[0], 0x0, 0x0, 0x0, 0x0, 0x5 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
mov 0x6, stor[23] ; source, dest
mov 0x83, var[45][128] ; source, dest
LABEL_83:
gosub inl[:LABEL_38] ; addr
mov 0x3, stor[9] ; source, dest
wait stor[9] ; frames
while stor[23], inl[:LABEL_83] ; counter, addr
mov 0x85, var[45][128] ; source, dest
gosub inl[:LABEL_38] ; addr
call Battle::scriptStopBentSound, 0x2, stor[0], 0x0, 0x3 ; unused, bentIndex, soundIndex, mode
call Battle::scriptBentLookAtBent, stor[0], stor[28] ; bentIndexToTurn, bentIndexTarget
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x10 ; bentIndex, animIndex
call Battle::scriptPlayBentSound, 0x2, stor[0], 0x1, 0x0, 0x0, 0x11, 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
call Battle::scriptPlayBentSound, 0x2, stor[0], 0x2, 0x0, 0x0, 0x1a, 0x0 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_84:
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_80] ; scriptIndex, address
gosub inl[:LABEL_0] ; addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0xfffffe0c, 0xfffffaec, 0xfffffed4 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_81] ; scriptIndex, address
mov 0x7, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0xfffffe0c, 0xfffffaec, 0xfffffed4 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_81] ; scriptIndex, address
mov 0x7, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_85:
mov 0x2, stor[8] ; source, dest
mov 0x19, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
mov 0x19, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
return

; SUBROUTINE
LABEL_86:
call Battle::scriptStopBentSound, 0x2, stor[0], 0x1, 0x3 ; unused, bentIndex, soundIndex, mode
call Battle::scriptStopBentSound, 0x2, stor[0], 0x2, 0x3 ; unused, bentIndex, soundIndex, mode
mov 0x21, var[44] ; source, dest
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::FUN_800cbb00, stor[0], 0xffffffff, 0x3, stor[24], stor[25], stor[26] ; bentIndex0, bentIndex1, ticks, x, y, z
call Battle::scriptSetBentRotationY, stor[0], 0xc00 ; bentIndex, y
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
JMP_7d70_3:
return

; SUBROUTINE
JMP_7d70_4:
mov inl[:LABEL_62], stor[9] ; source, dest
mov inl[:LABEL_66], stor[10] ; source, dest
mov stor[9], var[45][201] ; source, dest
mov stor[10], var[45][202] ; source, dest
jmp inl[:LABEL_87] ; addr

; SUBROUTINE
JMP_7d70_5:
mov inl[:LABEL_63], stor[9] ; source, dest
mov inl[:LABEL_67], stor[10] ; source, dest
mov stor[9], var[45][201] ; source, dest
mov stor[10], var[45][202] ; source, dest
jmp inl[:LABEL_87] ; addr

; SUBROUTINE
JMP_7d70_6:
mov inl[:LABEL_64], stor[9] ; source, dest
mov inl[:LABEL_68], stor[10] ; source, dest
mov stor[9], var[45][201] ; source, dest
mov stor[10], var[45][202] ; source, dest
jmp inl[:LABEL_87] ; addr

; SUBROUTINE
JMP_7d70_7:
mov inl[:LABEL_65], stor[9] ; source, dest
mov inl[:LABEL_69], stor[10] ; source, dest
mov stor[9], var[45][201] ; source, dest
mov stor[10], var[45][202] ; source, dest
jmp inl[:LABEL_87] ; addr
LABEL_87:
gosub inl[:LABEL_88] ; addr
call Battle::scriptLoadDeff, stor[9], stor[0], stor[28], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
gosub inl[:LABEL_158] ; addr
mov 0x52, var[44] ; source, dest
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[0], stor[stor[stor[0], 18], 29] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_91] ; scriptIndex, address
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x11 ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[0], 0x1 ; bentIndex, loop
mov 0x24, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptTickDeffLoadingStage, 0x1 ; loadingStage
wait_cmp ==, 0x0, stor[19] ; operator, left, right
mov 0x1, stor[stor[stor[0], 18], 15] ; source, dest
call Battle::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_0] ; addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
wait_cmp !=, 0x0, stor[19] ; operator, left, right
call Battle::scriptTickDeffLoadingStage, 0x2 ; loadingStage
call Battle::scriptTickDeffLoadingStage, 0x3 ; loadingStage
return

; SUBROUTINE
LABEL_88:
mov 0x0, var[45][248] ; source, dest
jmp_cmp ==, 0xcf, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp_cmp ==, 0xd0, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp_cmp ==, 0xd1, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp_cmp ==, 0xd2, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp_cmp ==, 0xd6, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp_cmp ==, 0xd8, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp_cmp ==, 0xdc, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp_cmp ==, 0xf1, stor[9], inl[:LABEL_89] ; operand, left, right, addr
jmp inl[:LABEL_90] ; addr
LABEL_89:
mov 0xfffffffe, stor[28] ; source, dest
LABEL_90:
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x64, var[45][147] ; source, dest
return

; FORK JMP
LABEL_91:
gosub inl[:LABEL_96] ; addr
mov stor[8], stor[16] ; source, dest
mov 0x1, stor[stor[stor[0], 29], 19] ; source, dest
mov 0x0, stor[15] ; source, dest
call Battle::allocateBillboardSpriteEffect, stor[18], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetEffectZ, stor[18], 0xfffffc00 ; effectIndex, z
mov stor[29], stor[30] ; source, dest
gosub inl[:LABEL_164] ; addr
call SEffe::scriptSetRelativePosition, stor[18], stor[29], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[0], 0x0, 0x400, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[18], 0x3 ; effectIndex, set
call SEffe::scriptSetRelativeScale, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x80, 0x80, 0x80 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerAttachment, stor[18], 0xa0, 0xa0, 0xa0, 0xfffffffe, 0xfffffffe, 0xfffffffe ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call Battle::scriptAllocateEmptyEffectManagerChild, stor[19] ; effectIndex
mov stor[29], stor[30] ; source, dest
gosub inl[:LABEL_164] ; addr
call SEffe::scriptSetRelativePosition, stor[19], stor[29], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[16], stor[stor[stor[0], 19], 9] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[19], inl[:LABEL_92] ; scriptIndex, address
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x1b, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
call Battle::allocateBillboardSpriteEffect, stor[9], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetEffectZ, stor[9], 0xfffffc00 ; effectIndex, z
mov stor[29], stor[30] ; source, dest
gosub inl[:LABEL_164] ; addr
call SEffe::scriptSetRelativePosition, stor[9], stor[29], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[9], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[9], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[9], 0xffffffff, 0x14, inl[:LABEL_110[stor[16]]], inl[:LABEL_111[stor[16]]], inl[:LABEL_112[stor[16]]] ; effectIndex, parentIndex, ticks, destR, destG, destB
call Battle::allocateBillboardSpriteEffect, stor[stor[stor[0], 9], 18], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetEffectZ, stor[stor[stor[0], 9], 18], 0xfffffc00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 9], 18], stor[29], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[stor[stor[0], 9], 18], 0xffffffff, 0x280, 0x280, 0x280 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 9], 18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[stor[stor[0], 9], 18], 0xffffffff, 0x14, 0x82, 0x82, 0x82 ; effectIndex, parentIndex, ticks, destR, destG, destB
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddScaleScalerAttachment, stor[9], 0x80, 0x80, 0x80, 0xfffffffc, 0xfffffffc, 0xfffffffc ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddRotationScalerAttachment, stor[9], 0xffffffff, 0x100, 0x100, 0x100, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddScaleScalerAttachment, stor[stor[stor[0], 9], 18], 0x64, 0x64, 0x64, 0xfffffffc, 0xfffffffc, 0xfffffffc ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddRotationScalerAttachment, stor[stor[stor[0], 9], 18], 0xffffffff, 0x100, 0x100, 0x100, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddScaleScalerAttachment, stor[9], 0x50, 0x50, 0x50, 0x0, 0x0, 0x0 ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddScaleScalerAttachment, stor[stor[stor[0], 9], 18], 0x40, 0x40, 0x40, 0x0, 0x0, 0x0 ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
mov 0x0, stor[stor[stor[0], 29], 19] ; source, dest
wait_cmp !=, 0x0, stor[15] ; operator, left, right
call Scus94491BpeSegment::scriptStopSound, 0x0, 0x1b, 0x3 ; soundFileIndex, soundIndex, mode
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x1e, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
deallocate_other stor[19] ; index
mov stor[29], stor[30] ; source, dest
gosub inl[:LABEL_164] ; addr
call SEffe::scriptAllocateParticleEffect, stor[22], 0xffffffff, 0xfff25, 0x19, 0x0, 0x1, 0x350, 0x410ff00, 0x15 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetGenericEffectValue, stor[22], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetEffectZ, stor[22], 0xfffffc00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[29], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[22], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
mov inl[:LABEL_110[stor[16]]], stor[25] ; source, dest
mov inl[:LABEL_111[stor[16]]], stor[26] ; source, dest
mov inl[:LABEL_112[stor[16]]], stor[27] ; source, dest
shl 0x1, stor[25] ; shift, val
shl 0x1, stor[26] ; shift, val
shl 0x1, stor[27] ; shift, val
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAllocateParticleEffect, stor[22], 0xffffffff, 0xfff25, 0x19, 0x0, 0x1, 0x220, 0x410ff00, 0x15 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetGenericEffectValue, stor[22], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetEffectZ, stor[22], 0xfffffc00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[29], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[22], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
mov inl[:LABEL_110[stor[16]]], stor[25] ; source, dest
mov inl[:LABEL_111[stor[16]]], stor[26] ; source, dest
mov inl[:LABEL_112[stor[16]]], stor[27] ; source, dest
shl 0x1, stor[25] ; shift, val
shl 0x1, stor[26] ; shift, val
shl 0x1, stor[27] ; shift, val
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAllocateParticleEffect, stor[22], 0xffffffff, 0xfff25, 0x19, 0x0, 0x1, 0x110, 0x410ff00, 0x15 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetGenericEffectValue, stor[22], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptSetEffectZ, stor[22], 0xfffffc00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[29], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[22], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
mov inl[:LABEL_110[stor[16]]], stor[25] ; source, dest
mov inl[:LABEL_111[stor[16]]], stor[26] ; source, dest
mov inl[:LABEL_112[stor[16]]], stor[27] ; source, dest
shl 0x1, stor[25] ; shift, val
shl 0x1, stor[26] ; shift, val
shl 0x1, stor[27] ; shift, val
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddLifespanAttachment, stor[18], 0x14 ; effectIndex, ticks
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerAttachment, stor[18], 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddConstantColourScalerAttachment, stor[9], 0xffffffff, 0xb, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddConstantColourScalerAttachment, stor[stor[stor[0], 9], 18], 0xffffffff, 0xb, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddScaleScalerAttachment, stor[9], 0xa, 0xa, 0xa, 0x0, 0x0, 0x0 ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptAddScaleScalerAttachment, stor[stor[stor[0], 9], 18], 0xa, 0xa, 0xa, 0x0, 0x0, 0x0 ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptStopSound, 0x0, 0x1e, 0x3 ; soundFileIndex, soundIndex, mode
mov 0x1, stor[stor[stor[0], 29], 19] ; source, dest
deallocate

; FORK JMP
LABEL_92:
mov 0x4, stor[23] ; source, dest
LABEL_93:
call Battle::scriptCalculateCameraValue, 0x0, 0x0, 0x0, 0x0, stor[25] ; type, mode, component, scriptIndex, out
call Battle::scriptCalculateCameraValue, 0x0, 0x0, 0x1, 0x0, stor[26] ; type, mode, component, scriptIndex, out
call Battle::scriptCalculateCameraValue, 0x0, 0x0, 0x2, 0x0, stor[27] ; type, mode, component, scriptIndex, out
call SEffe::scriptRotateBobjTowardsPoint, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex, parentIndex, x, y, z
call SEffe::allocateSpriteWithTrailEffect, stor[22], 0x40fff26, 0xc, 0x8, 0x2, 0x100 ; effectIndex, flags, colourAndScaleFlags, count, steps, brightnessAndScaleChange
call SEffe::scriptSetEffectZ, stor[22], 0xfffffd00 ; effectIndex, z
call SEffe::FUN_801156f8, stor[22], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[stor[stor[0], 22], 16] ; bound, dest
rand 0x400, stor[stor[stor[0], 22], 17] ; bound, dest
add 0x400, stor[stor[stor[0], 22], 17] ; amount, operand
mov stor[9], stor[stor[stor[0], 22], 9] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[22], inl[:LABEL_94] ; scriptIndex, address
call SEffe::allocateSpriteWithTrailEffect, stor[22], 0x40fff26, 0xc, 0x8, 0x2, 0x100 ; effectIndex, flags, colourAndScaleFlags, count, steps, brightnessAndScaleChange
call SEffe::scriptSetEffectZ, stor[22], 0xfffffd00 ; effectIndex, z
call SEffe::FUN_801156f8, stor[22], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[stor[stor[0], 22], 16] ; bound, dest
rand 0x400, stor[stor[stor[0], 22], 17] ; bound, dest
add 0x400, stor[stor[stor[0], 22], 17] ; amount, operand
mov stor[9], stor[stor[stor[0], 22], 9] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[22], inl[:LABEL_94] ; scriptIndex, address
yield
while stor[23], inl[:LABEL_93] ; counter, addr
rewind

; FORK JMP
LABEL_94:
call SEffe::allocateSpriteWithTrailEffect, stor[18], 0x40fff25, 0xc, 0xf, 0x2, 0x100 ; effectIndex, flags, colourAndScaleFlags, count, steps, brightnessAndScaleChange
call SEffe::scriptSetEffectZ, stor[18], 0xfffffd00 ; effectIndex, z
call SEffe::FUN_801156f8, stor[18], stor[0], 0xffffffff ; effectIndex, scriptIndex, coord2Index
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x8, inl[:LABEL_110[stor[9]]], inl[:LABEL_111[stor[9]]], inl[:LABEL_112[stor[9]]] ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, 0x8, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
LABEL_95:
add 0x60, stor[16] ; amount, operand
sub 0x80, stor[17] ; amount, operand
sin_12 stor[16], stor[25] ; angle, dest
cos_12 stor[16], stor[26] ; angle, dest
mul stor[17], stor[25] ; amount, operand
mul stor[17], stor[26] ; amount, operand
shr 0xc, stor[25] ; shift, val
shr 0xc, stor[26] ; shift, val
call SEffe::scriptAddRelativePositionScalerTicks1, stor[0], 0xffffffff, 0x1, stor[25], stor[26], 0x0 ; effectIndex, parentIndex, ticks, x, y, z
yield
jmp_cmp <, 0x0, stor[17], inl[:LABEL_95] ; operand, left, right, addr
deallocate

; SUBROUTINE
LABEL_96:
mov var[45][201], stor[9] ; source, dest
jmp_cmp ==, 0xc1, stor[9], inl[:LABEL_98] ; operand, left, right, addr
jmp_cmp ==, 0xc2, stor[9], inl[:LABEL_101] ; operand, left, right, addr
jmp_cmp ==, 0xc3, stor[9], inl[:LABEL_98] ; operand, left, right, addr
jmp_cmp ==, 0xc5, stor[9], inl[:LABEL_102] ; operand, left, right, addr
jmp_cmp ==, 0xc6, stor[9], inl[:LABEL_99] ; operand, left, right, addr
jmp_cmp ==, 0xc7, stor[9], inl[:LABEL_100] ; operand, left, right, addr
jmp_cmp ==, 0xc9, stor[9], inl[:LABEL_103] ; operand, left, right, addr
jmp_cmp ==, 0xca, stor[9], inl[:LABEL_104] ; operand, left, right, addr
jmp_cmp ==, 0xcf, stor[9], inl[:LABEL_101] ; operand, left, right, addr
jmp_cmp ==, 0xd0, stor[9], inl[:LABEL_102] ; operand, left, right, addr
jmp_cmp ==, 0xd1, stor[9], inl[:LABEL_98] ; operand, left, right, addr
jmp_cmp ==, 0xd2, stor[9], inl[:LABEL_103] ; operand, left, right, addr
jmp_cmp ==, 0xd6, stor[9], inl[:LABEL_99] ; operand, left, right, addr
jmp_cmp ==, 0xd8, stor[9], inl[:LABEL_104] ; operand, left, right, addr
jmp_cmp ==, 0xdc, stor[9], inl[:LABEL_100] ; operand, left, right, addr
jmp_cmp ==, 0xf1, stor[9], inl[:LABEL_105] ; operand, left, right, addr
jmp_cmp ==, 0xf2, stor[9], inl[:LABEL_98] ; operand, left, right, addr
jmp_cmp ==, 0xf3, stor[9], inl[:LABEL_99] ; operand, left, right, addr
jmp_cmp ==, 0xf4, stor[9], inl[:LABEL_100] ; operand, left, right, addr
jmp_cmp ==, 0xf5, stor[9], inl[:LABEL_102] ; operand, left, right, addr
jmp_cmp ==, 0xf6, stor[9], inl[:LABEL_103] ; operand, left, right, addr
jmp_cmp ==, 0xf7, stor[9], inl[:LABEL_104] ; operand, left, right, addr
jmp_cmp ==, 0xf8, stor[9], inl[:LABEL_101] ; operand, left, right, addr
jmp_cmp ==, 0xd4, stor[9], inl[:LABEL_106] ; operand, left, right, addr
jmp_cmp ==, 0xd9, stor[9], inl[:LABEL_107] ; operand, left, right, addr
jmp_cmp ==, 0xd7, stor[9], inl[:LABEL_108] ; operand, left, right, addr
jmp_cmp ==, 0xda, stor[9], inl[:LABEL_109] ; operand, left, right, addr
LABEL_97:
return
LABEL_98:
mov 0x0, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_99:
mov 0x1, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_100:
mov 0x2, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_101:
mov 0x3, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_102:
mov 0x4, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_103:
mov 0x5, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_104:
mov 0x6, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_105:
mov 0x7, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_106:
mov 0xb, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_107:
mov 0x10, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_108:
mov 0xd, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_109:
mov 0xc, stor[8] ; source, dest
jmp inl[:LABEL_97] ; addr
LABEL_110:
data 0x74
data 0x28
data 0x2b
data 0x6c
data 0x74
data 0x74
data 0x8
data 0x0
data 0x6f
data 0x74
data 0x78
data 0x64
data 0xf
data 0x78
data 0x74
data 0x8
data 0x0
LABEL_111:
data 0xe
data 0x53
data 0x64
data 0x6a
data 0x74
data 0x70
data 0x8
data 0x0
data 0x74
data 0xe
data 0x0
data 0x64
data 0xf
data 0x78
data 0x70
data 0x8
data 0x50
LABEL_112:
data 0x0
data 0x74
data 0x42
data 0x44
data 0x3c
data 0x44
data 0x6c
data 0x0
data 0x62
data 0x0
data 0x78
data 0x0
data 0x78
data 0x0
data 0x44
data 0x6c
data 0x14

; SUBROUTINE
LABEL_113:
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_15] ; addr
jmp inl[:LABEL_122] ; addr
data 0x49

; SUBROUTINE TABLE
LABEL_114:
rel :JMP_47ac_0
rel :JMP_47ac_1
rel :JMP_47ac_2
rel :JMP_47ac_3
rel :JMP_47ac_4

; SUBROUTINE
JMP_47ac_0:
gosub inl[:LABEL_133] ; addr
jmp_cmp !=, 0x1, stor[31], inl[:LABEL_115] ; operand, left, right, addr
gosub inl[:LABEL_130] ; addr
incr var[45][66] ; operand
LABEL_115:
return

; SUBROUTINE
JMP_47ac_1:
return

; SUBROUTINE
JMP_47ac_2:
return

; SUBROUTINE
JMP_47ac_3:
jmp_cmp ==, 0x1, stor[31], inl[:LABEL_116] ; operand, left, right, addr
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_116] ; operand, left, right, addr
mov 0x1, stor[27] ; source, dest
call Battle::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], stor[27] ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
LABEL_116:
return

; SUBROUTINE
JMP_47ac_4:
return

; SUBROUTINE
LABEL_117:
jmp_cmp ==, 0x0, stor[27], inl[:LABEL_119] ; operand, left, right, addr
call Battle::scriptAnimationHasFinished, stor[0], stor[17] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[17], inl[:LABEL_119] ; operand, left, right, addr
jmp_cmp !=, 0x19, stor[27], inl[:LABEL_118] ; operand, left, right, addr
mov 0x2, stor[31] ; source, dest
mov 0x1, stor[stor[stor[0], 32], 30] ; source, dest
LABEL_118:
mov 0x0, stor[27] ; source, dest
call Battle::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
LABEL_119:
return

; SUBROUTINE
LABEL_120:
jmp_cmp !&, 0x1, var[45][105], inl[:LABEL_121] ; operand, left, right, addr
and 0xfffffffe, var[45][105] ; and, operand
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptResumeAnimation, stor[0] ; bentIndex
LABEL_121:
return
LABEL_122:
mov 0x0, stor[stor[stor[0], 32], 29] ; source, dest
mov 0x0, stor[stor[stor[0], 32], 30] ; source, dest
mov 0x0, var[45][66] ; source, dest
LABEL_123:
mov var[45][82], stor[8] ; source, dest
gosub_table stor[8], inl[:LABEL_114] ; index, table
gosub inl[:LABEL_117] ; addr
gosub inl[:LABEL_120] ; addr
jmp_cmp !=, 0x1, var[45][66], inl[:LABEL_124] ; operand, left, right, addr
decr stor[16] ; operand
jmp_cmp !=, 0x0, stor[16], inl[:LABEL_124] ; operand, left, right, addr
mov 0x0, stor[15] ; source, dest
mov 0x19, stor[27] ; source, dest
call Battle::scriptSetInterpolationEnabled, stor[0], 0x0 ; bentIndex, set
call Battle::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], stor[27] ; bentIndex, animIndex
incr var[45][66] ; operand
LABEL_124:
yield
jmp_cmp !=, 0x5, var[45][82], inl[:LABEL_123] ; operand, left, right, addr
jmp_cmp !=, 0x2, stor[31], inl[:LABEL_125] ; operand, left, right, addr
mov 0x2, stor[stor[stor[0], 32], 30] ; source, dest
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
LABEL_125:
mov 0x1, stor[23] ; source, dest
mov stor[0], stor[28] ; source, dest
mov stor[32], stor[30] ; source, dest
gosub inl[:LABEL_21] ; addr
mov stor[9], stor[29] ; source, dest
gosub inl[:LABEL_136] ; addr
mov stor[29], stor[9] ; source, dest
mov stor[9], var[45][224] ; source, dest
jmp_cmp >=, 0x0, stor[9], inl[:LABEL_127] ; operand, left, right, addr
jmp_cmp !=, 0x0, var[45][243], inl[:LABEL_127] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
sub stor[9], stor[8] ; amount, operand
jmp_cmp <=, 0x0, stor[8], inl[:LABEL_126] ; operand, left, right, addr
mov 0x0, stor[8] ; source, dest
LABEL_126:
call Battle::scriptSetBentRawStat, stor[0], stor[8], CURRENT_HP ; bentIndex, value, statIndex
LABEL_127:
call Battle::scriptRenderDamage, stor[0], stor[9] ; bentIndex, damage
call Battle::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0x0, stor[8], inl[:LABEL_129] ; operand, left, right, addr
jmp_cmp ==, 0x2, stor[31], inl[:LABEL_128] ; operand, left, right, addr
gosub inl[:LABEL_0] ; addr
LABEL_128:
call Battle::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
wait stor[23] ; frames
gosub inl[:LABEL_29] ; addr
mov 0x0, var[45][188] ; source, dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_16] ; addr
mov 0x0, stor[8] ; source, dest
return
LABEL_129:
wait stor[23] ; frames
mov 0x1, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_130:
gosub inl[:LABEL_34] ; addr
jmp_cmp >, 0x0, stor[8], inl[:LABEL_131] ; operand, left, right, addr
mov 0x1, stor[stor[stor[0], 8], 8] ; source, dest
call Battle::scriptAllocateEmptyEffectManagerChild, stor[21] ; effectIndex
mov stor[0], stor[stor[stor[0], 21], 28] ; source, dest
mov stor[0], stor[stor[stor[0], 21], 30] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[21], inl[:LABEL_132] ; scriptIndex, address
LABEL_131:
return

; FORK JMP
LABEL_132:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x25, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
gosub inl[:LABEL_28] ; addr
call Battle::allocateBillboardSpriteEffect, stor[21], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[21], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[21], 0xffffffff, 0x800, 0x800, 0x800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[21], 0xffffffff, 0x60, 0x40, 0x60 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[21], 0x1 ; effectIndex, set
call SEffe::scriptAddConstantColourScalerAttachment, stor[21], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[21], 0xc ; effectIndex, ticks
call SEffe::scriptAllocateElectricityEffect, stor[18], 0xffffffff, 0x3e8, 0x8, 0x100, 0x100, 0x161020, 0x2 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xff, 0x0, 0xc0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x1000, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x800, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xc ; effectIndex, ticks
mov 0xd, stor[23] ; source, dest
wait stor[23] ; frames
deallocate
data 0x49

; SUBROUTINE
LABEL_133:
mov 0x0, stor[31] ; source, dest
mov 0x0, stor[16] ; source, dest
call Battle::scriptGetBentSlot, stor[32], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[8] ; amount, operand
jmp_cmp &, 0x2, var[45][stor[8]], inl[:LABEL_134] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[8], inl[:LABEL_134] ; operand, left, right, addr
mov var[45][89], stor[8] ; source, dest
mov inl[:LABEL_135[stor[8]]], stor[8] ; source, dest
rand 0x64, stor[9] ; bound, dest
jmp_cmp <=, stor[8], stor[9], inl[:LABEL_134] ; operand, left, right, addr
jmp_cmp ==, 0x0, var[45][83], inl[:LABEL_134] ; operand, left, right, addr
mov var[45][83], stor[8] ; source, dest
incr stor[8] ; operand
incr stor[8] ; operand
jmp_cmp >=, stor[8], var[45][89], inl[:LABEL_134] ; operand, left, right, addr
decr stor[8] ; operand
jmp_cmp !=, 0x0, var[45][66], inl[:LABEL_134] ; operand, left, right, addr
call Battle::scriptGetHitProperty, stor[32], stor[8], 0x1, stor[9] ; bentIndex, hitNum, hitPropertyIndex, value
call Battle::scriptGetBentStat, stor[0], HIT_COUNTER_FRAME_THRESHOLD, stor[27] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat, stor[0], _62, stor[11] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[27], inl[:LABEL_134] ; operand, left, right, addr
incr stor[27] ; operand
mov var[45][87], stor[8] ; source, dest
add var[45][88], stor[8] ; amount, operand
jmp_cmp >=, stor[27], stor[8], inl[:LABEL_134] ; operand, left, right, addr
mov stor[9], stor[13] ; source, dest
sub 0x3, stor[13] ; amount, operand
jmp_cmp >=, stor[27], stor[13], inl[:LABEL_134] ; operand, left, right, addr
sub stor[8], stor[13] ; amount, operand
mov 0x1, stor[16] ; source, dest
incr stor[31] ; operand
LABEL_134:
return
LABEL_135:
data 0x0
data 0x0
data 0x0
data 0x0
data 0x28
data 0x25
data 0x23
data 0x20
data 0x1e

; SUBROUTINE
LABEL_136:
jmp_cmp >, 0x0, stor[29], inl[:LABEL_141] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_141] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[9] ; source, dest
and 0xf, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_138] ; operand, left, right, addr
mov var[128 + stor[8]][0], stor[10] ; source, dest
jmp_cmp ==, 0x2, stor[10], inl[:LABEL_137] ; operand, left, right, addr
jmp_cmp ==, 0x3, stor[10], inl[:LABEL_137] ; operand, left, right, addr
and 0x3, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_138] ; operand, left, right, addr
mov 0x0, stor[29] ; source, dest
gosub inl[:LABEL_57] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_141] ; addr
LABEL_137:
and 0xc, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_138] ; operand, left, right, addr
mov 0x0, stor[29] ; source, dest
gosub inl[:LABEL_59] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_141] ; addr
LABEL_138:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[9], inl[:LABEL_139] ; operand, left, right, addr
shl 0x1, stor[29] ; shift, val
LABEL_139:
call Battle::scriptGetBentStat, stor[0], GUARD, stor[9] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_141] ; operand, left, right, addr
jmp_cmp >=, 0x0, stor[29], inl[:LABEL_140] ; operand, left, right, addr
shr 0x1, stor[29] ; shift, val
LABEL_140:
gosub inl[:LABEL_58] ; addr
mov 0x19, stor[23] ; source, dest
LABEL_141:
jmp_cmp >=, 0x3b9ac9ff, stor[29], inl[:LABEL_142] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[29] ; source, dest
LABEL_142:
return

; SUBROUTINE
LABEL_143:
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_15] ; addr
gosub inl[:LABEL_151] ; addr
mov stor[32], var[45][224] ; source, dest
jmp_cmp !=, 0x0, var[45][243], inl[:LABEL_145] ; operand, left, right, addr
jmp_cmp >=, 0x0, stor[32], inl[:LABEL_145] ; operand, left, right, addr
mov 0x1, stor[31] ; source, dest
call Battle::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
mov stor[32], stor[9] ; source, dest
sub stor[9], stor[8] ; amount, operand
jmp_cmp <=, 0x0, stor[8], inl[:LABEL_144] ; operand, left, right, addr
mov 0x0, stor[8] ; source, dest
LABEL_144:
call Battle::scriptSetBentRawStat, stor[0], stor[8], CURRENT_HP ; bentIndex, value, statIndex
LABEL_145:
gosub inl[:LABEL_29] ; addr
mov 0x0, var[45][188] ; source, dest
return

; SUBROUTINE
LABEL_146:
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_15] ; addr
call Battle::scriptRenderDamage, stor[0], stor[32] ; bentIndex, damage
jmp_cmp >=, 0x0, stor[32], inl[:LABEL_148] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x1 ; bentIndex, animIndex
LABEL_147:
yield
call Battle::scriptAnimationHasFinished, stor[0], stor[28] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[28], inl[:LABEL_147] ; operand, left, right, addr
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
call Battle::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0x0, stor[8], inl[:LABEL_149] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
LABEL_148:
wait stor[23] ; frames
gosub inl[:LABEL_29] ; addr
mov 0x0, var[45][188] ; source, dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_16] ; addr
mov 0x0, stor[8] ; source, dest
return
LABEL_149:
wait stor[23] ; frames
mov 0x1, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_150:
call Battle::scriptSetBentDeadAndDropLoot, stor[0], 0x1 ; bentIndex, dead
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x16, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
call Battle::scriptDisableBentShadow, stor[0] ; bentIndex
call Battle::scriptAllocateMonsterDeathEffect, stor[18], stor[0], 0xfff1f, 0x0 ; effectIndex, bentIndex, spriteIndex, unused
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call Battle::scriptGetBobjModelPartCount, stor[0], stor[23] ; bobjIndex, partCount
shr 0x1, stor[23] ; shift, val
add 0x2, stor[23] ; amount, operand
call SEffe::scriptAddLifespanAttachment, stor[18], stor[23] ; effectIndex, ticks
wait stor[23] ; frames
call Battle::FUN_800cb618, stor[0], 0x0 ; bentIndex, set
gosub inl[:LABEL_241] ; addr
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_16] ; addr
return

; SUBROUTINE
LABEL_151:
mov 0x1, stor[23] ; source, dest
jmp_cmp >, 0x0, stor[32], inl[:LABEL_156] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_156] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[9] ; source, dest
and 0xf, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_153] ; operand, left, right, addr
mov var[128 + stor[8]][0], stor[10] ; source, dest
jmp_cmp ==, 0x2, stor[10], inl[:LABEL_152] ; operand, left, right, addr
jmp_cmp ==, 0x3, stor[10], inl[:LABEL_152] ; operand, left, right, addr
and 0x3, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_153] ; operand, left, right, addr
mov 0x0, stor[32] ; source, dest
gosub inl[:LABEL_57] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_156] ; addr
LABEL_152:
and 0xc, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_153] ; operand, left, right, addr
mov 0x0, stor[32] ; source, dest
gosub inl[:LABEL_59] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_156] ; addr
LABEL_153:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[9], inl[:LABEL_154] ; operand, left, right, addr
shl 0x1, stor[32] ; shift, val
LABEL_154:
call Battle::scriptGetBentStat, stor[0], GUARD, stor[9] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_156] ; operand, left, right, addr
jmp_cmp >=, 0x0, stor[32], inl[:LABEL_155] ; operand, left, right, addr
shr 0x1, stor[32] ; shift, val
LABEL_155:
gosub inl[:LABEL_58] ; addr
mov 0x19, stor[23] ; source, dest
LABEL_156:
jmp_cmp >=, 0x3b9ac9ff, stor[32], inl[:LABEL_157] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[32] ; source, dest
LABEL_157:
return
data 0x148
data 0x900ebe9
data 0x49
data 0x0
data 0x70341
data 0x1000000
data 0x4
data 0x500003a
data 0x900ffff
data 0x2030138
data 0x2000000
data 0x49

; SUBROUTINE
LABEL_158:
call Battle::scriptGetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
return

; SUBROUTINE
LABEL_159:
gosub inl[:LABEL_0] ; addr
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
return

; SUBROUTINE
LABEL_160:
call Battle::scriptGetBentPos, stor[0], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
call Battle::scriptBentLookAtBent, stor[0], stor[28] ; bentIndexToTurn, bentIndexTarget
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x2 ; bentIndex, animIndex
call Battle::FUN_800cbb00, stor[0], stor[28], 0xf, stor[8], 0x0, 0x0 ; bentIndex0, bentIndex1, ticks, x, y, z
call Battle::scriptPlayBentSound, 0x2, stor[0], 0x0, 0x0, 0x0, 0x0, 0x5 ; type, bentIndex, soundIndex, a3, a4, initialDelay, repeatDelay
gosub inl[:LABEL_162] ; addr
call Battle::scriptStopBentSound, 0x2, stor[0], 0x0, 0x3 ; unused, bentIndex, soundIndex, mode
call Battle::scriptBentLookAtBent, stor[0], stor[28] ; bentIndexToTurn, bentIndexTarget
return

; SUBROUTINE
LABEL_161:
call Battle::FUN_800cbb00, stor[0], 0xffffffff, 0x3, stor[24], stor[25], stor[26] ; bentIndex0, bentIndex1, ticks, x, y, z
call Battle::scriptSetBentRotationY, stor[0], 0xc00 ; bentIndex, y
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
wait_cmp !&, 0x4000000, stor[7] ; operator, left, right
return

; SUBROUTINE
LABEL_162:
mov 0x3, stor[17] ; source, dest
LABEL_163:
mov 0x82, var[45][128] ; source, dest
gosub inl[:LABEL_38] ; addr
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
while stor[17], inl[:LABEL_163] ; counter, addr
mov 0x83, var[45][128] ; source, dest
gosub inl[:LABEL_38] ; addr
return
data 0x49

; SUBROUTINE
LABEL_164:
call Battle::scriptGetBentStat, stor[30], MIDDLE_OFFSET_Y, stor[8] ; bentIndex, statIndex, value
mul 0x64, stor[8] ; amount, operand
add 0xffffff00, stor[8] ; amount, operand
neg stor[8] ; operand
jmp_cmp >=, 0xfffffe00, stor[8], inl[:LABEL_165] ; operand, left, right, addr
mov 0xfffffe00, stor[8] ; source, dest
LABEL_165:
return

; SUBROUTINE
LABEL_166:
call Battle::scriptAllocateEmptyEffectManagerChild, stor[9] ; effectIndex
gosub inl[:LABEL_173] ; addr
gosub inl[:LABEL_169] ; addr
jmp_cmp ==, 0x1, stor[stor[stor[0], 9], 8], inl[:LABEL_168] ; operand, left, right, addr
gosub inl[:LABEL_178] ; addr
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_167] ; operand, left, right, addr
jmp_cmp <, 0x7, stor[8], inl[:LABEL_168] ; operand, left, right, addr
LABEL_167:
gosub inl[:LABEL_180] ; addr
LABEL_168:
deallocate_other stor[9] ; index
mov 0x0, var[45][203] ; source, dest
return

; SUBROUTINE
LABEL_169:
mov 0x0, stor[stor[stor[0], 9], 8] ; source, dest
call Battle::scriptGetBentStat, stor[0], STATUS, stor[stor[stor[0], 9], 9] ; bentIndex, statIndex, value
mov stor[stor[stor[0], 9], 9], stor[stor[stor[0], 9], 10] ; source, dest
and 0x4, stor[stor[stor[0], 9], 10] ; and, operand
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 10], inl[:LABEL_172] ; operand, left, right, addr
mov 0x1, stor[stor[stor[0], 9], 8] ; source, dest
rand 0x64, stor[stor[stor[0], 9], 11] ; bound, dest
jmp_cmp <=, 0x32, stor[stor[stor[0], 9], 11], inl[:LABEL_170] ; operand, left, right, addr
mov 0xf, stor[8] ; source, dest
mov var[53], stor[stor[stor[0], 9], 12] ; source, dest
rand stor[stor[stor[0], 9], 12], stor[10] ; bound, dest
mov var[52][stor[10]], stor[28] ; source, dest
jmp inl[:LABEL_172] ; addr
LABEL_170:
jmp_cmp <=, 0x4b, stor[stor[stor[0], 9], 11], inl[:LABEL_171] ; operand, left, right, addr
mov 0x9, stor[8] ; source, dest
jmp inl[:LABEL_172] ; addr
LABEL_171:
mov 0x0, stor[8] ; source, dest
gosub inl[:LABEL_186] ; addr
mov 0x1, stor[stor[stor[0], 9], 8] ; source, dest
LABEL_172:
return

; SUBROUTINE
LABEL_173:
call Battle::scriptGetBentSlot, stor[0], stor[stor[stor[0], 9], 10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[stor[stor[0], 9], 10], stor[10] ; source, dest
mov var[128 + stor[10]][7], stor[stor[stor[0], 9], 11] ; source, dest
and 0x10000, stor[stor[stor[0], 9], 11] ; and, operand
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 11], inl[:LABEL_174] ; operand, left, right, addr
mov stor[stor[stor[0], 9], 10], stor[10] ; source, dest
sub 0x10000, var[128 + stor[10]][7] ; amount, operand
mov 0x2, stor[12] ; source, dest
jmp inl[:LABEL_177] ; addr
LABEL_174:
call Battle::scriptGetBentStat2, stor[0], CURRENT_HP, stor[stor[stor[0], 9], 10] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat2, stor[0], MAX_HP, stor[stor[stor[0], 9], 11] ; bentIndex, statIndex, value
mov stor[stor[stor[0], 9], 11], stor[stor[stor[0], 9], 9] ; source, dest
div 0x2, stor[stor[stor[0], 9], 9] ; amount, operand
jmp_cmp <, stor[stor[stor[0], 9], 9], stor[stor[stor[0], 9], 10], inl[:LABEL_175] ; operand, left, right, addr
mov stor[stor[stor[0], 9], 11], stor[stor[stor[0], 9], 9] ; source, dest
div 0x4, stor[stor[stor[0], 9], 9] ; amount, operand
jmp_cmp <, stor[stor[stor[0], 9], 9], stor[stor[stor[0], 9], 10], inl[:LABEL_176] ; operand, left, right, addr
mov 0x2, stor[12] ; source, dest
jmp inl[:LABEL_177] ; addr
LABEL_175:
mov 0x0, stor[12] ; source, dest
jmp inl[:LABEL_177] ; addr
LABEL_176:
mov 0x1, stor[12] ; source, dest
jmp inl[:LABEL_177] ; addr
LABEL_177:
return

; SUBROUTINE
LABEL_178:
mov stor[12], stor[8] ; source, dest
mul 0x4, stor[8] ; amount, operand
rand 0x64, stor[stor[stor[0], 9], 9] ; bound, dest
div 0x19, stor[stor[stor[0], 9], 9] ; amount, operand
add stor[stor[stor[0], 9], 9], stor[8] ; amount, operand
gosub inl[:LABEL_179] ; addr
return

; SUBROUTINE
LABEL_179:
mov inl[:LABEL_61[stor[8]]], stor[8] ; source, dest
return

; SUBROUTINE
LABEL_180:
mov 0x0, stor[stor[stor[0], 9], 12] ; source, dest
mov var[51], stor[stor[stor[0], 9], 26] ; source, dest
decr stor[stor[stor[0], 9], 26] ; operand
LABEL_181:
mov stor[stor[stor[0], 9], 26], stor[10] ; source, dest
mov var[50][stor[10]], stor[stor[stor[0], 9], 28] ; source, dest
call Battle::scriptGetBentSlot, stor[stor[stor[0], 9], 28], stor[stor[stor[0], 9], 10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[stor[stor[0], 9], 10], stor[10] ; source, dest
mov var[128 + stor[10]][7], stor[stor[stor[0], 9], 11] ; source, dest
and 0x300, stor[stor[stor[0], 9], 11] ; and, operand
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 11], inl[:LABEL_182] ; operand, left, right, addr
mov stor[stor[stor[0], 9], 28], stor[stor[stor[0], 9], 8] ; source, dest
mov 0x1, stor[stor[stor[0], 9], 12] ; source, dest
LABEL_182:
decr stor[stor[stor[0], 9], 26] ; operand
jmp_cmp <=, 0x0, stor[stor[stor[0], 9], 26], inl[:LABEL_181] ; operand, left, right, addr
jmp_cmp ==, 0x1, stor[stor[stor[0], 9], 12], inl[:LABEL_188] ; operand, left, right, addr
rand 0x64, stor[stor[stor[0], 9], 9] ; bound, dest
jmp_cmp <=, 0x32, stor[stor[stor[0], 9], 9], inl[:LABEL_186] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], MONSTER_ELEMENT, stor[stor[stor[0], 9], 9] ; bentIndex, statIndex, value
mov var[51], stor[stor[stor[0], 9], 26] ; source, dest
decr stor[stor[stor[0], 9], 26] ; operand
LABEL_183:
mov stor[stor[stor[0], 9], 26], stor[10] ; source, dest
mov var[50][stor[10]], stor[stor[stor[0], 9], 28] ; source, dest
call Battle::scriptGetCharOrMonsterId, stor[stor[stor[0], 9], 28], stor[stor[stor[0], 9], 10] ; bentIndex, id
call Battle::scriptGetBentStat, stor[stor[stor[0], 9], 28], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, 0x4000, stor[10], inl[:LABEL_184] ; operand, left, right, addr
mov stor[stor[stor[0], 9], 28], stor[10] ; source, dest
jmp_cmp !&, 0x2, stor[stor[stor[0], 10], 7], inl[:LABEL_184] ; operand, left, right, addr
mov 0x9, stor[stor[stor[0], 9], 10] ; source, dest
LABEL_184:
gosub inl[:LABEL_190] ; addr
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 11], inl[:LABEL_185] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[stor[stor[0], 9], 28], stor[stor[stor[0], 9], 10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[stor[stor[0], 9], 10], stor[10] ; source, dest
mov var[128 + stor[10]][7], stor[stor[stor[0], 9], 11] ; source, dest
and 0xc0, stor[stor[stor[0], 9], 11] ; and, operand
jmp_cmp !=, 0x0, stor[stor[stor[0], 9], 11], inl[:LABEL_185] ; operand, left, right, addr
mov stor[stor[stor[0], 9], 28], stor[stor[stor[0], 9], 8] ; source, dest
mov 0x1, stor[stor[stor[0], 9], 12] ; source, dest
LABEL_185:
decr stor[stor[stor[0], 9], 26] ; operand
jmp_cmp <=, 0x0, stor[stor[stor[0], 9], 26], inl[:LABEL_183] ; operand, left, right, addr
jmp_cmp ==, 0x1, stor[stor[stor[0], 9], 12], inl[:LABEL_188] ; operand, left, right, addr

; SUBROUTINE
LABEL_186:
mov 0xa, stor[23] ; source, dest
mov var[51], stor[stor[stor[0], 9], 26] ; source, dest
LABEL_187:
rand stor[stor[stor[0], 9], 26], stor[10] ; bound, dest
mov var[50][stor[10]], stor[stor[stor[0], 9], 8] ; source, dest
decr stor[23] ; operand
jmp_cmp ==, 0x0, stor[23], inl[:LABEL_189] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[stor[stor[0], 9], 8], stor[stor[stor[0], 9], 10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[stor[stor[0], 9], 10], stor[10] ; source, dest
mov var[128 + stor[10]][7], stor[stor[stor[0], 9], 11] ; source, dest
and 0xc0, stor[stor[stor[0], 9], 11] ; and, operand
jmp_cmp !=, 0x0, stor[stor[stor[0], 9], 11], inl[:LABEL_187] ; operand, left, right, addr
LABEL_188:
mov stor[stor[stor[0], 9], 8], stor[28] ; source, dest
return
LABEL_189:
mov 0x11, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_190:
mov 0x0, stor[stor[stor[0], 9], 11] ; source, dest
mov stor[stor[stor[0], 9], 10], stor[10] ; source, dest
mov inl[:LABEL_192[stor[10]]], stor[stor[stor[0], 9], 25] ; source, dest
and stor[stor[stor[0], 9], 9], stor[stor[stor[0], 9], 25] ; and, operand
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 25], inl[:LABEL_191] ; operand, left, right, addr
mov 0x1, stor[stor[stor[0], 9], 11] ; source, dest
LABEL_191:
return
LABEL_192:
data 0x1
data 0x2
data 0x4
data 0x20
data 0x0
data 0x2
data 0x80
data 0x40
data 0x4
data 0x0
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50

; SUBROUTINE
JMP_7d70_8:
mov 0x4, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
call Battle::scriptLoadSpellOrItemDeff, 0xef, stor[0], stor[0], 0x0 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint
return

; SUBROUTINE
JMP_7d70_10:
call Battle::scriptSetBentStat, stor[0], 0x1, GUARD ; bentIndex, value, statIndex
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x55, var[44] ; source, dest
mov 0x6, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x5, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetEffectZ, stor[18], 0xfffffe00 ; effectIndex, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0xd5, 0xfd, 0x15 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0xc00, 0xc00 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x14, 0xfffffa00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x14 ; effectIndex, ticks
mov 0x19, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_0] ; addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
mov 0x21, var[44] ; source, dest
return

; SUBROUTINE
JMP_7d70_11:
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
or 0x1, var[128 + stor[8]][7] ; or, operand
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x55, var[44] ; source, dest
mov 0x7, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x5, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetEffectZ, stor[18], 0xfffffe00 ; effectIndex, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0xfd, 0x8b, 0x15 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0xc00, 0xc00 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x14, 0xfffffa00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x14 ; effectIndex, ticks
mov 0x19, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_0] ; addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
mov 0x21, var[44] ; source, dest
return

; SUBROUTINE
JMP_7d70_12:
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
or 0x4, var[128 + stor[8]][7] ; or, operand
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x55, var[44] ; source, dest
mov 0x8, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x5, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetEffectZ, stor[18], 0xfffffe00 ; effectIndex, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0x19, 0x82, 0xfd ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0xc00, 0xc00 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x14, 0xfffffa00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x14 ; effectIndex, ticks
mov 0x19, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_0] ; addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
mov 0x21, var[44] ; source, dest
return

; SUBROUTINE
JMP_7d70_13:
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x56, var[44] ; source, dest
call Battle::scriptLoadDeff, 0xeb, stor[0], stor[0], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
call Battle::scriptTickDeffLoadingStage, 0x1 ; loadingStage
mov 0x9, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
call Battle::scriptTickDeffLoadingStage, 0x2 ; loadingStage
call Battle::scriptTickDeffLoadingStage, 0x3 ; loadingStage
mov 0x21, var[44] ; source, dest
return

; SUBROUTINE
JMP_7d70_15:
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0xa, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
jmp_cmp ==, stor[0], stor[28], inl[:LABEL_193] ; operand, left, right, addr
call Battle::scriptBentLookAtBent, stor[0], stor[28] ; bentIndexToTurn, bentIndexTarget
LABEL_193:
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x10 ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
gosub inl[:LABEL_0] ; addr
call Battle::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Battle::scriptSetBentRotationY, stor[0], 0xc00 ; bentIndex, y
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
call Battle::scriptGetBentStat2, stor[0], MAX_HP, stor[8] ; bentIndex, statIndex, value
div 0x5, stor[8] ; amount, operand
jmp_cmp <, 0x0, stor[8], inl[:LABEL_194] ; operand, left, right, addr
mov 0x1, stor[8] ; source, dest
LABEL_194:
jmp_cmp ==, stor[0], stor[28], inl[:LABEL_195] ; operand, left, right, addr
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
jmp inl[:LABEL_196] ; addr
LABEL_195:
mov stor[8], stor[32] ; source, dest
gosub inl[:LABEL_143] ; addr
gosub inl[:LABEL_146] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_196] ; operand, left, right, addr
gosub inl[:LABEL_150] ; addr
return
LABEL_196:
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
JMP_7d70_16:
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
or 0x10000, var[128 + stor[8]][7] ; or, operand
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x56, var[44] ; source, dest
call Battle::scriptLoadDeff, 0xeb, stor[0], stor[0], 0x1, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
call Battle::scriptTickDeffLoadingStage, 0x1 ; loadingStage
mov 0xb, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
call Battle::scriptTickDeffLoadingStage, 0x2 ; loadingStage
call Battle::scriptTickDeffLoadingStage, 0x3 ; loadingStage
mov 0x21, var[44] ; source, dest
return

; SUBROUTINE
JMP_7d70_14:
mov 0xc, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
mov 0x1e, stor[23] ; source, dest
wait stor[23] ; frames
mov stor[0], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
mov 0x8d, var[44] ; source, dest
mov 0x1, var[45][203] ; source, dest
mov 0x0, stor[8] ; source, dest
gosub_table stor[8], inl[:LABEL_246] ; index, table
mov 0x21, var[44] ; source, dest
return
ENTRYPOINT_10:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_197] ; operand, left, right, addr
jmp_cmp &, 0x2, stor[7], inl[:LABEL_197] ; operand, left, right, addr
mov stor[32], stor[9] ; source, dest
gosub inl[:LABEL_207] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_197] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], GUARD, stor[8] ; bentIndex, statIndex, value
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_198] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; and, operand
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_201] ; operand, left, right, addr
jmp_cmp &, 0x10, stor[8], inl[:LABEL_201] ; operand, left, right, addr
jmp_cmp >=, stor[8], inl[:LABEL_203[stor[32]]], inl[:LABEL_201] ; operand, left, right, addr
LABEL_197:
consume
LABEL_198:
gosub inl[:LABEL_199] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], stor[18], 0x200, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[8] ; source, dest
wait stor[8] ; frames
gosub inl[:LABEL_199] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], stor[18], 0x600, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
consume

; SUBROUTINE
LABEL_199:
memcpy 0x3, stor[24], inl[:LABEL_200] ; size, src, dest
call Battle::scriptAllocateRadialGradientEffect, stor[18], 0x3, 0x2 ; effectIndex, count, type
mov 0xfffffd00, stor[8] ; source, dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x1, 0x200 ; effectIndex, genericIndex, value
call SEffe::scriptSetGenericEffectValue, stor[18], 0x2, 0x0 ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xc8, 0x78, 0x8c ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xc, 0x1194, 0x1194, 0x1194 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xc ; effectIndex, ticks
memcpy 0x3, inl[:LABEL_200], stor[24] ; size, src, dest
return
LABEL_200:
data 0x0
data 0x0
data 0x0
data 0x211
data 0x380
data 0x700092d
data 0x58
LABEL_201:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
or inl[:LABEL_202[stor[32]]], stor[8] ; or, operand
call Battle::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
mov var[45][stor[9]], stor[11] ; source, dest
and 0xf, stor[11] ; and, operand
mov 0x0, var[45][stor[9]] ; source, dest
or 0x380, var[45][stor[9]] ; or, operand
or stor[32], var[45][stor[9]] ; or, operand
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[32], stor[stor[stor[0], 18], 31] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 17] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_220] ; scriptIndex, address
consume
LABEL_202:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x10
data 0x20
data 0x40
data 0x80
LABEL_203:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x100
data 0x20
data 0x40
data 0x80

; SUBROUTINE
LABEL_204:
mov stor[8], stor[9] ; source, dest
mov 0x0, stor[8] ; source, dest
LABEL_205:
jmp_cmp ==, stor[9], inl[:LABEL_202[stor[8]]], inl[:LABEL_206] ; operand, left, right, addr
incr stor[8] ; operand
jmp_cmp >=, 0x7, stor[8], inl[:LABEL_205] ; operand, left, right, addr
debug96 0x4, 0x8, stor[8] ; ?, ?, ?
mov 0xffffffff, stor[8] ; source, dest
LABEL_206:
return

; SUBROUTINE
LABEL_207:
mov 0x0, stor[8] ; source, dest
call Battle::scriptGetBentStat, stor[0], EQUIPMENT_STATUS_RESIST, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, inl[:LABEL_202[stor[9]]], stor[10], inl[:LABEL_208] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_208:
return
ENTRYPOINT_11:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_210] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; and, operand
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_210] ; operand, left, right, addr
gosub inl[:LABEL_204] ; addr
jmp_cmp >, 0x0, stor[8], inl[:LABEL_212] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp &, 0x80, var[45][stor[9]], inl[:LABEL_210] ; operand, left, right, addr
or 0x80, var[45][stor[9]] ; or, operand
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 31] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 17] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_220] ; scriptIndex, address
jmp_cmp ==, 0x0, var[45][183], inl[:LABEL_211] ; operand, left, right, addr
LABEL_209:
yield
jmp_cmp !=, 0x0, stor[stor[stor[0], 18], 17], inl[:LABEL_209] ; operand, left, right, addr
LABEL_210:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[8] ; source, dest
shl stor[9], stor[8] ; shift, val
neg stor[8] ; operand
decr stor[8] ; operand
and stor[8], var[45][183] ; and, operand
LABEL_211:
consume
LABEL_212:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
call Battle::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
jmp inl[:LABEL_210] ; addr
data 0x10c
data 0x2000008
data 0x208
data 0x7000820
data 0x200001c
data 0x1730338
data 0x200001c
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x148
data 0x9000009
data 0x11b
data 0x2000008
data 0x10341
data 0x2000008
data 0x5000021
data 0x900fff2
data 0x49

; SUBROUTINE
LABEL_213:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_215] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[18] ; bentIndex, statIndex, value
and 0xff, stor[18] ; and, operand
jmp_cmp ==, 0x0, stor[18], inl[:LABEL_215] ; operand, left, right, addr
jmp_cmp &, 0x1, stor[18], inl[:LABEL_214] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_215] ; operand, left, right, addr
LABEL_214:
gosub inl[:LABEL_216] ; addr
LABEL_215:
return

; SUBROUTINE
LABEL_216:
mov var[45][stor[9]], stor[31] ; source, dest
and 0xf, stor[31] ; and, operand
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[31], stor[stor[stor[0], 18], 31] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_217] ; scriptIndex, address
return

; FORK JMP
LABEL_217:
call Battle::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[8] ; source, dest
shl stor[9], stor[8] ; shift, val
or stor[8], var[45][183] ; or, operand
fork_reenter stor[28], 0xb, stor[31] ; index, entrypoint, stor[32] value
gosub inl[:LABEL_17] ; addr
deallocate

; SUBROUTINE TABLE
LABEL_218:
rel :JMP_6c30_0
rel :JMP_6c30_1
rel :JMP_6c30_2
rel :JMP_6c30_3
rel :JMP_6c30_4
rel :JMP_6c30_5
rel :JMP_6c30_6
rel :JMP_6c30_7

; SUBROUTINE TABLE
LABEL_219:
rel :JMP_6c50_0
rel :JMP_6c50_1
rel :JMP_6c50_2
rel :JMP_6c50_3
rel :JMP_6c50_4
rel :JMP_6c50_5
rel :JMP_6c50_6
rel :JMP_6c50_7

; FORK JMP
LABEL_220:
call Battle::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_225] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[8], inl[:LABEL_221] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_225] ; operand, left, right, addr
LABEL_221:
gosub_table stor[31], inl[:LABEL_219] ; index, table
LABEL_222:
mov var[45][stor[9]], stor[11] ; source, dest
jmp_cmp !&, 0x80, stor[11], inl[:LABEL_224] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[8], inl[:LABEL_223] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_224] ; operand, left, right, addr
LABEL_223:
mov stor[11], stor[13] ; source, dest
and 0xf, stor[13] ; and, operand
jmp_cmp !=, stor[13], stor[31], inl[:LABEL_225] ; operand, left, right, addr
mov stor[11], stor[13] ; source, dest
and 0xf00, stor[13] ; and, operand
jmp_cmp ==, 0xf00, stor[13], inl[:LABEL_226] ; operand, left, right, addr
gosub_table stor[31], inl[:LABEL_218] ; index, table
yield
jmp inl[:LABEL_222] ; addr
LABEL_224:
jmp_cmp ==, 0x0, var[45][stor[9]], inl[:LABEL_226] ; operand, left, right, addr
LABEL_225:
mov 0x0, stor[17] ; source, dest
yield
yield
yield
deallocate
LABEL_226:
mov 0x0, var[45][stor[9]] ; source, dest
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
call Battle::scriptSetBentStat, stor[28], stor[8], STATUS ; bentIndex, value, statIndex
gosub_table stor[31], inl[:LABEL_227] ; index, table
deallocate

; SUBROUTINE TABLE
LABEL_227:
rel :JMP_6e0c_0
rel :JMP_6e0c_1
rel :JMP_6e0c_2
rel :JMP_6e0c_3
rel :JMP_6e0c_4
rel :JMP_6e0c_5
rel :JMP_6e0c_6
rel :JMP_6e0c_7

; SUBROUTINE
JMP_6e0c_0:
gosub inl[:LABEL_229] ; addr
jmp_cmp &, 0x2, var[45][245], inl[:LABEL_228] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0x9 ; bentIndex, animIndex
gosub inl[:LABEL_1] ; addr
LABEL_228:
call Battle::scriptSetBentDead, stor[28], 0x0 ; bentIndex, dead
gosub inl[:LABEL_2] ; addr
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
JMP_6e0c_1:
gosub inl[:LABEL_230] ; addr
gosub inl[:LABEL_233] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x40, 0x0, 0x3c ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x40, 0x0, 0x3c ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
JMP_6e0c_2:
gosub inl[:LABEL_230] ; addr
gosub inl[:LABEL_233] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x3c, 0x3c, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x3c, 0x3c, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
JMP_6e0c_3:
gosub inl[:LABEL_230] ; addr
gosub inl[:LABEL_233] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x14, 0x14, 0x46 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x14, 0x14, 0x46 ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
JMP_6e0c_4:
gosub inl[:LABEL_230] ; addr
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
JMP_6e0c_5:
gosub inl[:LABEL_230] ; addr
gosub inl[:LABEL_233] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x1e, 0x1e, 0x1e ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x1e, 0x1e, 0x1e ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[19], 0x2 ; effectIndex, set
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[20], 0x2 ; effectIndex, set
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
JMP_6e0c_6:
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
JMP_6e0c_7:
gosub inl[:LABEL_230] ; addr
gosub inl[:LABEL_232] ; addr
gosub inl[:LABEL_231] ; addr
return

; SUBROUTINE
LABEL_229:
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x8, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x8 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_230:
deallocate_other stor[19] ; index
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
yield
return

; SUBROUTINE
LABEL_231:
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff3d, 0xc, 0x200, 0x2, 0x100, 0x4127f00, 0x29 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
mov 0x20, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_232:
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x2d, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff2d, 0x10, 0x80, 0x2, 0x800, 0x6107f00, 0x4 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[28], 0x100, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x28 ; effectIndex, ticks
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_233:
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff26, 0x8, 0x200, 0x1, 0x200, 0x4187f00, 0x36 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[19], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[19], 0x20 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[20], stor[28], 0xfff26, 0x8, 0x200, 0x1, 0x200, 0x4187f00, 0x36 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[20], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[20], 0xffffffff, 0x96, 0x96, 0x96 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[20], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[20], 0x20 ; effectIndex, ticks
return

; SUBROUTINE
JMP_6c50_0:
call Battle::scriptSetBentDead, stor[28], 0x1 ; bentIndex, dead
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_234] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xe ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x0 ; bentIndex, loop
LABEL_234:
call SEffe::allocateDeffTmd, stor[18], 0xfff25 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffffe00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x4, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], 0xffffffff, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetEffectLightingDisableFlag, stor[18], 0x1 ; effectIndex, set
mov 0x4, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x0, stor[17] ; source, dest

; SUBROUTINE
JMP_6c30_0:
return

; SUBROUTINE
JMP_6c50_1:
gosub inl[:LABEL_244] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x1e, 0x0, 0x1e ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff2b, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_6c30_1:
gosub inl[:LABEL_242] ; addr
return

; SUBROUTINE
JMP_6c50_2:
gosub inl[:LABEL_244] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x19, 0x19, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff2f, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x180, 0x180, 0x180 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_6c30_2:
gosub inl[:LABEL_242] ; addr
return

; SUBROUTINE
JMP_6c50_3:
gosub inl[:LABEL_244] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x5, 0x5, 0x28 ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff33, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x180, 0x180, 0x180 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_6c30_3:
jmp_cmp !&, 0x1, var[2], inl[:LABEL_235] ; operand, left, right, addr
call Battle::scriptGetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
add 0x14, stor[26] ; amount, operand
call Battle::scriptSetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
jmp inl[:LABEL_236] ; addr
LABEL_235:
call Battle::scriptGetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
sub 0x14, stor[26] ; amount, operand
call Battle::scriptSetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
LABEL_236:
return

; SUBROUTINE
JMP_6c50_4:
gosub inl[:LABEL_244] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff05, 0x8, 0x78, 0x20, 0x0, 0x0, 0x10 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call Battle::scriptSetBentStat, stor[28], 0x0, GUARD ; bentIndex, value, statIndex
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_6c30_4:
gosub inl[:LABEL_242] ; addr
return

; SUBROUTINE
JMP_6c50_5:
gosub inl[:LABEL_244] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x1e, 0x1e, 0x1e ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[18], 0x2 ; effectIndex, set
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff26, 0x5, 0xc8, 0x11, 0x0, 0x4208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0xa, 0x1e, 0x1e, 0x1e ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[19], 0x2 ; effectIndex, set
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_6c30_5:
gosub inl[:LABEL_242] ; addr
return

; SUBROUTINE
JMP_6c50_6:
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_6c30_6:
return

; SUBROUTINE
JMP_6c50_7:
gosub inl[:LABEL_244] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x14, 0x5 ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff38, 0x5, 0xc8, 0x1, 0x60, 0x0, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_6c30_7:
jmp_cmp !&, 0x40, var[45][stor[9]], inl[:LABEL_238] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[10] ; source, dest
shl stor[8], stor[10] ; shift, val
call Battle::scriptGetBentStat2, stor[28], MAX_HP, stor[8] ; bentIndex, statIndex, value
div 0xa, stor[8] ; amount, operand
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_237] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_237:
or stor[10], var[45][188] ; or, operand
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
xor 0x40, var[45][stor[9]] ; xor, operand
LABEL_238:
return

; SUBROUTINE
LABEL_239:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp !&, 0x80, var[45][stor[9]], inl[:LABEL_240] ; operand, left, right, addr
or 0x40, var[45][stor[9]] ; or, operand
LABEL_240:
return

; SUBROUTINE
LABEL_241:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov 0x0, var[45][stor[9]] ; source, dest
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
call Battle::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
return
data 0x1730338
data 0x2000000
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x70341
data 0x1000000
data 0x80
data 0x700092d
data 0x900000c
data 0x210
data 0x1000000
data 0xffffff7f
data 0x700092d
data 0x211
data 0x10000
data 0x700092d
data 0x49
data 0x10c
data 0x2000008
data 0x208
data 0x7000820
data 0x200000a
data 0x1730338
data 0x200000a
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x70341
data 0x1000000
data 0x80
data 0x700092d
data 0x900000c
data 0x210
data 0x1000000
data 0xffffff7f
data 0x700092d
data 0x211
data 0x10000
data 0x700092d
data 0x11b
data 0x2000008
data 0x10341
data 0x2000008
data 0x5000021
data 0x900ffe8
data 0x49
data 0x1730338
data 0x2000000
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x49

; SUBROUTINE
LABEL_242:
jmp_cmp !&, var[45][stor[9]], 0x40, inl[:LABEL_243] ; operand, left, right, addr
sub 0x40, var[45][stor[9]] ; amount, operand
sub 0x100, var[45][stor[9]] ; amount, operand
and 0xf00, stor[11] ; and, operand
jmp_cmp !=, 0x0, stor[11], inl[:LABEL_243] ; operand, left, right, addr
mov 0x0, var[45][stor[9]] ; source, dest
LABEL_243:
return

; SUBROUTINE
LABEL_244:
call Battle::allocateBillboardSpriteEffect, stor[18], 0xfff26 ; effectIndex, flags
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_245] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x3e8, 0x3e8, 0x3e8 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], stor[18], 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
return

; SUBROUTINE
LABEL_245:
gosub inl[:LABEL_28] ; addr
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_X, stor[24] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_Y, stor[25] ; bentIndex, statIndex, value
mul 0x64, stor[24] ; amount, operand
mul 0x64, stor[25] ; amount, operand
neg stor[25] ; operand
mov 0x0, stor[26] ; source, dest
call Battle::scriptGetBentPos, stor[28], stor[14], stor[15], stor[16] ; bentIndex, x, y, z
add stor[14], stor[24] ; amount, operand
add stor[15], stor[25] ; amount, operand
add stor[16], stor[26] ; amount, operand
return

; SUBROUTINE TABLE
LABEL_246:
rel :JMP_7d70_0
rel :JMP_7d70_1
rel :JMP_7d70_2
rel :JMP_7d70_3
rel :JMP_7d70_4
rel :JMP_7d70_5
rel :JMP_7d70_6
rel :JMP_7d70_7
rel :JMP_7d70_8
rel :JMP_7d70_9
rel :JMP_7d70_10
rel :JMP_7d70_11
rel :JMP_7d70_12
rel :JMP_7d70_13
rel :JMP_7d70_14
rel :JMP_7d70_15
rel :JMP_7d70_16
data 0x3d
data 0x3d
data 0x3d
data 0x3d
data 0x3d
data 0x3d
data 0x3d
data 0x3d
data 0x24
data 0x24
data 0x24
data 0x24
ENTRYPOINT_0:
gosub inl[:LABEL_40] ; addr
call Battle::scriptAttachShadowToBentModelPart, stor[0], 0xa ; bentIndex, modelPartAttachmentIndex
call Battle::scriptSetBentShadowSize, stor[0], 0x2000, 0x2000 ; bentIndex, x, z
gosub inl[:LABEL_41] ; addr
LABEL_247:
wait_cmp &, 0x8, stor[7] ; operator, left, right
gosub inl[:LABEL_43] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_248] ; operand, left, right, addr
gosub inl[:LABEL_166] ; addr
gosub_table stor[8], inl[:LABEL_246] ; index, table
LABEL_248:
gosub inl[:LABEL_42] ; addr
and 0xfffffff7, stor[7] ; and, operand
jmp inl[:LABEL_247] ; addr
data 0x49
ENTRYPOINT_1:
consume
ENTRYPOINT_2:
gosub inl[:LABEL_143] ; addr
ENTRYPOINT_3:
gosub inl[:LABEL_146] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:ENTRYPOINT_4] ; operand, left, right, addr
consume
ENTRYPOINT_4:
call Battle::scriptGetBentSlot, stor[0], stor[25], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[25]][7], stor[26] ; source, dest
shr 0x18, stor[26] ; shift, val
and 0xff, stor[26] ; and, operand
jmp_cmp ==, 0x1, stor[26], inl[:LABEL_249] ; operand, left, right, addr
jmp_cmp ==, 0x0, reg[10], inl[:LABEL_251] ; operand, left, right, addr
call Battle::scriptGiveItem, reg[10], reg[10] ; itemId, itemGiven
jmp inl[:LABEL_250] ; addr
LABEL_249:
mov var[5], stor[8] ; source, dest
add 0x64, stor[8] ; amount, operand
mov stor[8], var[5] ; source, dest
LABEL_250:
mov 0x3, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
gosub inl[:LABEL_70] ; addr
LABEL_251:
gosub inl[:LABEL_150] ; addr
consume
ENTRYPOINT_5:
gosub inl[:LABEL_113] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:ENTRYPOINT_4] ; operand, left, right, addr
consume
ENTRYPOINT_6:
ENTRYPOINT_7:
ENTRYPOINT_8:
ENTRYPOINT_9:
ENTRYPOINT_12:
ENTRYPOINT_13:
ENTRYPOINT_14:
ENTRYPOINT_15:
consume
