entrypoint :ENTRYPOINT_0
entrypoint :ENTRYPOINT_1
entrypoint :ENTRYPOINT_2
entrypoint :ENTRYPOINT_3
entrypoint :ENTRYPOINT_4
entrypoint :ENTRYPOINT_5
entrypoint :ENTRYPOINT_6
entrypoint :ENTRYPOINT_7
entrypoint :ENTRYPOINT_8
entrypoint :ENTRYPOINT_9
entrypoint :ENTRYPOINT_10
entrypoint :ENTRYPOINT_11
entrypoint :ENTRYPOINT_12
entrypoint :ENTRYPOINT_13
entrypoint :ENTRYPOINT_14
entrypoint :ENTRYPOINT_15
data 0x10c
data 0xf00ff2d
data 0x49

; SUBROUTINE
LABEL_0:
yield
call Battle::scriptAnimationHasFinished, stor[0], stor[8] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_0] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_1:
yield
call Battle::scriptAnimationHasFinished, stor[28], stor[8] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_1] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_2:
jmp_cmp &, 0x2, stor[stor[stor[0], 28], 7], inl[:LABEL_3] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_4] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[8], inl[:LABEL_4] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0x0, stor[8], inl[:LABEL_4] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[28], MAX_HP, stor[9] ; bentIndex, statIndex, value
div 0x4, stor[9] ; amount, operand
jmp_cmp >=, stor[9], stor[8], inl[:LABEL_6] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x40, stor[8], inl[:LABEL_5] ; operand, left, right, addr
LABEL_3:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0x0 ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_4:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xe ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x0 ; bentIndex, loop
return
LABEL_5:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xa, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xa ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
return
LABEL_6:
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xb, stor[8], inl[:LABEL_7] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xb ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x1 ; bentIndex, loop
LABEL_7:
return
data 0x1730338
data 0x200001c
data 0x200000a
data 0x0
data 0x208
data 0x2000008
data 0x10050a80
data 0x208
data 0x5
data 0x10000a80
data 0xa80338
data 0x200001e
data 0x2000008
data 0x25
data 0x1ed0138
data 0x200001e
data 0x208
data 0x2000008
data 0xf00772d
data 0xa90338
data 0x200001e
data 0x48
data 0x2000009
data 0x60341
data 0x80
data 0x2000009
data 0x900000a
data 0x1e00338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x140
data 0x9000006
data 0x1fb0338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x20242
data 0x2000009
data 0x900001b
data 0x148
data 0x900001c
data 0x208
data 0x2000009
data 0xf00772d
data 0x20242
data 0x2000008
data 0x900000f
data 0xa90338
data 0x200001e
data 0x5
data 0x2000009
data 0x70341
data 0x1000000
data 0x8
data 0x2000009
data 0x9000008
data 0x216
data 0x1
data 0x2000008
data 0x208
data 0xf00772d
data 0x2000009
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49
data 0xa90338
data 0x200001e
data 0x48
data 0x2000008
data 0x60341
data 0x80
data 0x2000008
data 0x900000a
data 0x1e10438
data 0x200001e
data 0x200001c
data 0x2000008
data 0x200000a
data 0x49
data 0x1ec0538
data 0x200001e
data 0x200001c
data 0xf00772d
data 0x2000008
data 0x200000a
data 0x49

; SUBROUTINE
LABEL_8:
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
or stor[9], var[45][246] ; or, operand
return

; SUBROUTINE
LABEL_9:
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
neg stor[9] ; operand
decr stor[9] ; operand
and stor[9], var[45][246] ; and, operand
return
data 0x10c
data 0x2000008
data 0x70341
data 0x1000000
data 0x200000
data 0x3071c00
data 0x9000007
data 0x11b
data 0x2000008
data 0x49
data 0x357
data 0x200001c
data 0xa
data 0x2000008

; SUBROUTINE
LABEL_10:
yield
jmp_cmp &, 0x200000, stor[stor[stor[0], 28], 7], inl[:LABEL_10] ; operand, left, right, addr
yield
yield
return

; SUBROUTINE
LABEL_11:
yield
mov var[49], stor[9] ; source, dest
mov 0x0, stor[10] ; source, dest
mov 0x0, stor[11] ; source, dest
mov 0x0, stor[12] ; source, dest
mov 0x0, stor[8] ; source, dest
LABEL_12:
mov var[48][stor[8]], stor[12] ; source, dest
mov stor[stor[stor[0], 12], 7], stor[10] ; source, dest
and 0x200000, stor[10] ; and, operand
or stor[10], stor[11] ; or, operand
incr stor[8] ; operand
jmp_cmp >, stor[9], stor[8], inl[:LABEL_12] ; operand, left, right, addr
jmp_cmp !=, 0x0, stor[11], inl[:LABEL_11] ; operand, left, right, addr
yield
yield
return

; SUBROUTINE
LABEL_13:
yield
call Battle::scriptIsFloatingNumberOnScreen, stor[8] ; onScreen
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_13] ; operand, left, right, addr
return
data 0x1730338
data 0x200001c
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x10c
data 0x700092d
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x210
data 0x1000000
data 0xffffff00
data 0x2000008
data 0xa80338
data 0x200001c
data 0x2000008
data 0x1000000
data 0x5
data 0x49

; SUBROUTINE
LABEL_14:
jmp_cmp >, 0x0, var[45][64], inl[:LABEL_20] ; operand, left, right, addr
call Battle::scriptSetBentStat, stor[30], var[45][64], ADDITION_HITS ; bentIndex, value, statIndex
call Battle::scriptPhysicalAttack, stor[30], stor[28], stor[9], stor[10] ; attackerIndex, defenderIndex, damage, specialEffects
mov stor[10], var[45][241] ; source, dest
call Battle::scriptGetBentStat, stor[30], STATUS, stor[11] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[11], inl[:LABEL_15] ; operand, left, right, addr
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_15] ; operand, left, right, addr
shr 0x1, stor[9] ; shift, val
LABEL_15:
call Battle::scriptGetBentSlot, stor[30], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[10] ; amount, operand
mov var[45][stor[10]], stor[10] ; source, dest
jmp_cmp !&, 0x2, stor[10], inl[:LABEL_16] ; operand, left, right, addr
jmp_cmp &, 0x4, stor[10], inl[:LABEL_16] ; operand, left, right, addr
shr 0x1, stor[9] ; shift, val
LABEL_16:
jmp_cmp >=, 0x0, stor[9], inl[:LABEL_18] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[30], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[10] ; amount, operand
jmp_cmp !&, 0x1, var[45][stor[10]], inl[:LABEL_18] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[30], CURRENT_HP, stor[10] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat2, stor[30], MAX_HP, stor[11] ; bentIndex, statIndex, value
div 0x2, stor[11] ; amount, operand
jmp_cmp <, stor[11], stor[10], inl[:LABEL_18] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[30], MAX_HP, stor[11] ; bentIndex, statIndex, value
div 0x4, stor[11] ; amount, operand
jmp_cmp >=, stor[11], stor[10], inl[:LABEL_17] ; operand, left, right, addr
mul 0x3, stor[9] ; amount, operand
shr 0x1, stor[9] ; shift, val
jmp inl[:LABEL_18] ; addr
LABEL_17:
mul 0x2, stor[9] ; amount, operand
LABEL_18:
jmp_cmp >=, 0x3b9ac9ff, stor[9], inl[:LABEL_19] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[9] ; source, dest
LABEL_19:
return
LABEL_20:
mov 0xffffffff, stor[9] ; source, dest
mov 0xffffffff, stor[10] ; source, dest
return
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff43
data 0x49
data 0x10c
data 0x200000d
data 0x208
data 0x7000d32
data 0x200001c
data 0x70341
data 0x1000000
data 0x2
data 0x3071c00
data 0x900000b
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff32
data 0x11b
data 0x200000d
data 0x208
data 0xa
data 0x200000e
data 0x40341
data 0x5000033
data 0x200000d
data 0x900ffed
data 0x49
data 0x30a
data 0x2
data 0x2000008
data 0x900002d
data 0x148
data 0x9000007
data 0x30a
data 0x2
data 0x9000027
data 0x2000008
data 0x49
data 0xa90338
data 0x2000008
data 0x5
data 0x2000009
data 0x70341
data 0x1000000
data 0x4000
data 0x2000009
data 0x900000a
data 0x208
data 0x9
data 0x2000009
data 0x140
data 0x9000005
data 0xa70238
data 0x2000008
data 0x2000009
data 0x60341
data 0x1000000
data 0x2
data 0x3070800
data 0x900000d
data 0x20c0238
data 0x2000008
data 0xa09000e
data 0x2050338
data 0x2000008
data 0xa09001f
data 0xa09001f
data 0x49
data 0x20c0238
data 0x2000008
data 0xa090010
data 0x49
data 0x0
data 0x0
data 0x8
data 0x9
data 0xd
data 0xb
data 0xa
data 0x9
data 0xc
data 0x8
data 0xc
data 0x8
data 0x8
data 0x9
data 0xb
data 0xb
data 0x8
data 0x9
data 0xc
data 0x8
data 0xb
data 0x7
data 0x1800
data 0x1800
data 0x1000
data 0xe00
data 0x1600
data 0x1300
data 0xe00
data 0x2000
data 0x1300
data 0x1500
data 0x49

; SUBROUTINE
LABEL_21:
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_X, stor[24] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_Y, stor[25] ; bentIndex, statIndex, value
mul 0x64, stor[24] ; amount, operand
mul 0x64, stor[25] ; amount, operand
neg stor[25] ; operand
mov 0x0, stor[26] ; source, dest
call Battle::scriptGetBentPos, stor[28], stor[14], stor[15], stor[16] ; bentIndex, x, y, z
add stor[14], stor[24] ; amount, operand
add stor[15], stor[25] ; amount, operand
add stor[16], stor[26] ; amount, operand
return
data 0x1730338
data 0x200001c
data 0x2000008
data 0x0
data 0x208
data 0x200001e
data 0x10040880
data 0x49

; SUBROUTINE
LABEL_22:
jmp_cmp >, 0x0, var[45][224], inl[:LABEL_23] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp !&, 0x10, stor[8], inl[:LABEL_23] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[8] ; amount, operand
or 0xf00, var[45][stor[8]] ; or, operand
LABEL_23:
return

; SUBROUTINE
LABEL_24:
gosub inl[:LABEL_11] ; addr
mov 0x0, stor[9] ; source, dest
LABEL_25:
mov var[34][stor[9]], stor[28] ; source, dest
call Battle::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
jmp_cmp !&, 0x400, var[128 + stor[8]][7], inl[:LABEL_26] ; operand, left, right, addr
fork_reenter stor[28], 0x4, 0x0 ; index, entrypoint, stor[32] value
LABEL_26:
incr stor[9] ; operand
jmp_cmp <, stor[9], var[35], inl[:LABEL_25] ; operand, left, right, addr
gosub inl[:LABEL_11] ; addr
return
data 0x0
data 0x60341
data 0x4
data 0xf00f52d
data 0x900ffff
data 0x49
data 0xa90338
data 0x200001c
data 0x8
data 0x2000008
data 0x210
data 0x80
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_27:
call SEffe::scriptGetAdditionOverlayActiveStatus, 0x0, stor[8] ; type, state
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_28] ; operand, left, right, addr
mov var[45][104], stor[8] ; source, dest
return
LABEL_28:
mov 0xffffffff, stor[8] ; source, dest
return
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x339
data 0x337
data 0x338
data 0x338
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x33a
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x205
data 0x205
data 0x200
data 0x205
data 0x200
data 0x337
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x33e
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x204
data 0x204
data 0x204
data 0x204
data 0x204
data 0x204
data 0x204
data 0x205
data 0x205
data 0x338
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x33b
data 0x33c
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x33d
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x200
data 0x50
data 0x140
data 0x9000136
data 0x50
data 0x50
data 0x50
data 0x210538
data 0x6
data 0x1000000
data 0xfff44800
data 0x1000000
data 0xfffc1800
data 0x0
data 0x200001c
data 0x220538
data 0x6
data 0x0
data 0x1000000
data 0xfffc7c00
data 0x0
data 0x200001c
data 0x0
data 0x2ea0938
data 0x2000012
data 0x200001c
data 0xfff2a
data 0x14
data 0x9c4
data 0x14
data 0x100
data 0x0
data 0x12
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x400
data 0x400
data 0x400
data 0x2210538
data 0x2000012
data 0x200001c
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2590238
data 0x2000013
data 0xfff26
data 0x2210538
data 0x2000013
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe0c
data 0x2250538
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x14
data 0x1c2
data 0x1c2
data 0x1c2
data 0x2270538
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xc8
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2590238
data 0x2000015
data 0xfff26
data 0x2210538
data 0x2000015
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe0c
data 0x2250538
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x14
data 0x200
data 0x200
data 0x200
data 0x2270538
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xc8
data 0x0
data 0x0
data 0x0
data 0x49
data 0x208
data 0x1b
data 0x2000017
data 0x102
data 0x2000017
data 0x2590238
data 0x2000014
data 0xfff26
data 0x2210538
data 0x2000014
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe70
data 0x2250538
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x3e8
data 0x3e8
data 0x3e8
data 0x23f0738
data 0x2000014
data 0x10e
data 0x10e
data 0x10e
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x2270538
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xc8
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2590238
data 0x2000016
data 0xfff26
data 0x2210538
data 0x2000016
data 0x200001c
data 0x0
data 0x1000000
data 0xfffffc00
data 0x1000000
data 0xfffffe70
data 0x2250538
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x23f0738
data 0x2000016
data 0x10e
data 0x10e
data 0x10e
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x1000000
data 0xffffffe2
data 0x2270538
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2370838
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0xd2
data 0x0
data 0x0
data 0x0
data 0x49
data 0x2450638
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x5
data 0x28
data 0x28
data 0x28
data 0x208
data 0x5
data 0x2000017
data 0x102
data 0x2000017
data 0x2400638
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x12
data 0x1000
data 0x1000
data 0x1000
data 0x2450638
data 0x2000013
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x2450638
data 0x2000014
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x12
data 0x1000
data 0x1000
data 0x1000
data 0x2450638
data 0x2000015
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x2450638
data 0x2000016
data 0x1000000
data 0xffffffff
data 0x12
data 0x0
data 0x0
data 0x0
data 0x0
data 0x208
data 0x19
data 0x2000017
data 0x102
data 0x2000017
data 0x153
data 0x2000012
data 0x153
data 0x2000013
data 0x0
data 0x153
data 0x2000014
data 0x153
data 0x2000015
data 0x0
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x244
data 0x200001f
data 0x900fcc1
data 0x50
data 0x2580138
data 0x2000012
data 0x2210538
data 0x2000012
data 0x2000000
data 0x0
data 0x0
data 0x0
data 0x2230538
data 0x2000012
data 0x2000000
data 0x0
data 0x0
data 0x0
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x800
data 0x800
data 0x800
data 0x208
data 0x200001c
data 0x31c1200
data 0x208
data 0x2000000
data 0x31e1200
data 0x208
data 0xf00802d
data 0x31f1200
data 0x26a0238
data 0x2000012
data 0x900ffde
data 0x49
data 0x208
data 0x1
data 0x2000008
data 0x102
data 0x2000017
data 0x10c
data 0x2000008
data 0x1

; SUBROUTINE
LABEL_29:
yield
jmp_cmp !&, 0x4, var[58], inl[:LABEL_29] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0xffffffff, var[128 + stor[8]][0] ; source, dest
mov 0xffffffff, var[128 + stor[8]][1] ; source, dest
mov 0xffffffff, var[128 + stor[8]][2] ; source, dest
mov 0xffffffff, var[128 + stor[8]][3] ; source, dest
mov 0xffffffff, var[128 + stor[8]][4] ; source, dest
mov 0xffffffff, var[128 + stor[8]][5] ; source, dest
mov 0x0, var[128 + stor[8]][6] ; source, dest
mov 0x0, var[128 + stor[8]][7] ; source, dest
return
data 0x0
data 0x70341
data 0x1000000
data 0x10
data 0x500003a
data 0x900ffff
data 0x49

; SUBROUTINE
LABEL_30:
gosub inl[:LABEL_24] ; addr
gosub inl[:LABEL_43] ; addr
gosub inl[:LABEL_11] ; addr
gosub inl[:LABEL_13] ; addr
call Battle::scriptFinishBentTurn, stor[0] ; bentIndex
return

; SUBROUTINE
LABEL_31:
yield
jmp_cmp !=, 0x0, var[45][183], inl[:LABEL_31] ; operand, left, right, addr
gosub inl[:LABEL_11] ; addr
mov 0x20, var[45][252] ; source, dest
mov 0x0, var[45][148] ; source, dest
call Battle::scriptSetBentStat, stor[0], 0x0, GUARD ; bentIndex, value, statIndex
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[9] ; source, dest
mov stor[9], stor[10] ; source, dest
and 0x3, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_32] ; operand, left, right, addr
sub 0x1, var[128 + stor[8]][7] ; amount, operand
LABEL_32:
mov stor[10], stor[9] ; source, dest
and 0xc, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_33] ; operand, left, right, addr
sub 0x4, var[128 + stor[8]][7] ; amount, operand
LABEL_33:
mov 0x0, stor[8] ; source, dest
gosub inl[:LABEL_132] ; addr
yield
yield
yield
jmp_cmp !&, 0x40, stor[7], inl[:LABEL_34] ; operand, left, right, addr
mov 0x1, stor[8] ; source, dest
jmp inl[:LABEL_35] ; addr
LABEL_34:
gosub inl[:LABEL_36] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_35] ; operand, left, right, addr
yield
gosub inl[:LABEL_38] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_35] ; operand, left, right, addr
gosub inl[:LABEL_40] ; addr
LABEL_35:
return

; SUBROUTINE
LABEL_36:
mov 0x0, stor[8] ; source, dest
call Battle::scriptGetBentSlot, stor[0], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[10]][7], stor[9] ; source, dest
and 0x30, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_37] ; operand, left, right, addr
sub 0x10, var[128 + stor[10]][7] ; amount, operand
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0xe, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
gosub inl[:LABEL_49] ; addr
mov 0x1e, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptResumeAnimation, stor[0] ; bentIndex
mov 0x1, stor[8] ; source, dest
LABEL_37:
return

; SUBROUTINE
LABEL_38:
mov 0x0, stor[8] ; source, dest
call Battle::scriptGetBentStat2, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x10, stor[9], inl[:LABEL_39] ; operand, left, right, addr
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0xd, stor[8] ; source, dest
mov 0x1e, stor[9] ; source, dest
gosub inl[:LABEL_49] ; addr
mov 0x1e, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptResumeAnimation, stor[0] ; bentIndex
mov 0x1, stor[8] ; source, dest
LABEL_39:
return

; SUBROUTINE
LABEL_40:
mov 0x0, stor[11] ; source, dest
LABEL_41:
mov var[32][stor[11]], stor[10] ; source, dest
call Battle::scriptGetBentSlot, stor[10], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp !&, 0x80, var[45][stor[9]], inl[:LABEL_42] ; operand, left, right, addr
and 0xff7f, var[45][stor[9]] ; and, operand
or 0x10000, var[45][stor[9]] ; or, operand
LABEL_42:
incr stor[11] ; operand
jmp_cmp <, stor[11], var[33], inl[:LABEL_41] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_43:
mov 0x0, stor[11] ; source, dest
LABEL_44:
mov var[32][stor[11]], stor[28] ; source, dest
call Battle::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
gosub inl[:LABEL_106] ; addr
incr stor[11] ; operand
jmp_cmp <, stor[11], var[33], inl[:LABEL_44] ; operand, left, right, addr
return
data 0x30242
data 0x2000008
data 0x9000029

; SUBROUTINE
LABEL_45:
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0xfd, 0x8b, 0x15 ; effectIndex, parentIndex, ticks, destR, destG, destB
jmp inl[:LABEL_48] ; addr

; SUBROUTINE
LABEL_46:
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0xd5, 0xfd, 0x15 ; effectIndex, parentIndex, ticks, destR, destG, destB
jmp inl[:LABEL_48] ; addr

; SUBROUTINE
LABEL_47:
call Battle::scriptAllocateGuardEffect, stor[18] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x2, 0x19, 0x82, 0xfd ; effectIndex, parentIndex, ticks, destR, destG, destB
LABEL_48:
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0xc00, 0xc00 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0xfffffa00, 0xc00, 0xc00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[19], stor[0], 0xfff20, 0x18, 0x10, 0x4, 0x400, 0xc7f00, 0x2c ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], stor[0], 0x0, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[19], stor[0], 0x0, 0xfffffd00, 0xfffffe00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[19], 0x18 ; effectIndex, ticks
return
data 0x0
data 0x0
data 0x0
data 0xd
data 0x0
data 0x0
data 0x0
data 0xd
data 0x0
data 0x0
data 0x0
data 0xd
data 0xc2
data 0xc2
data 0xc2
data 0xc2
data 0x0
data 0x0
data 0x0
data 0x0

; SUBROUTINE
LABEL_49:
call Battle::scriptAllocateEmptyEffectManagerChild, stor[11] ; effectIndex
mov stor[8], stor[stor[stor[0], 11], 8] ; source, dest
mov stor[9], stor[stor[stor[0], 11], 9] ; source, dest
mov stor[10], stor[stor[stor[0], 11], 10] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[11], inl[:LABEL_50] ; scriptIndex, address
return

; FORK JMP
LABEL_50:
wait stor[10] ; frames
call Scus94491BpeSegment_8002::scriptGetFreeTextboxIndex, stor[11] ; textboxIndex
call Scus94491BpeSegment_8002::scriptAddTextbox, stor[11], 0x1121, 0xa0, 0x32, 0x1c, 0x1, inl[:LABEL_51[:LABEL_51[stor[8]]]] ; index, packedData, x, y, width, height, text
wait stor[9] ; frames
call Scus94491BpeSegment_8002::scriptDeallocateTextbox, stor[11] ; index
yield
deallocate
LABEL_51:
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
rel :PTR_1f98_0
data 0x208
data 0xf00cb2d
data 0x2000008
data 0x20242
data 0x2000008
data 0x900004e
data 0x208
data 0x24
data 0xf00fc2d
data 0x3550238
data 0x200001c
data 0x2000017
data 0x2ea0938
data 0x200000f
data 0x200001c
data 0xfff18
data 0x2000017
data 0x0
data 0x1
data 0x0
data 0x1000000
data 0x40000
data 0x40
data 0x2250538
data 0x200000f
data 0x1000000
data 0xffffffff
data 0x320
data 0x320
data 0x320
data 0x2400638
data 0x200000f
data 0x1000000
data 0xffffffff
data 0x4
data 0xc80
data 0xc80
data 0xc80
data 0x24c0238
data 0x200000f
data 0xf
data 0x2ea0938
data 0x2000010
data 0x200001c
data 0xfff26
data 0x2000017
data 0x0
data 0x1
data 0x0
data 0x1000000
data 0x4060000
data 0x40
data 0x2250538
data 0x2000010
data 0x1000000
data 0xffffffff
data 0x190
data 0x190
data 0x190
data 0x2400638
data 0x2000010
data 0x1000000
data 0xffffffff
data 0x6
data 0x708
data 0x708
data 0x708
data 0x2270538
data 0x2000010
data 0x1000000
data 0xffffffff
data 0x64
data 0x1e
data 0x0
data 0x2290338
data 0x2000010
data 0x0
data 0x1
data 0x24c0238
data 0x2000010
data 0xf
data 0x208
data 0xf00fc2d
data 0x2000008
data 0x148
data 0x900f842
data 0x357
data 0x200001c
data 0x2
data 0x2000008
data 0x49
data 0x49
data 0x208
data 0x5
data 0x2000017
data 0x102
data 0x2000017
data 0x208
data 0x5
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x0
data 0x200000a
data 0x148
data 0x900ff66
data 0x1420238
data 0x2000000
data 0x2
data 0x208
data 0x6
data 0x2000017
data 0x208
data 0x1000000
data 0xfffffc00
data 0x2000018
data 0x218
data 0x100
data 0x2000018
data 0x840238
data 0x2000000
data 0x2000018
data 0x0
data 0x243
data 0x2000017
data 0x900fff9
data 0x840238
data 0x2000000
data 0x400
data 0x208
data 0x14
data 0x2000017
data 0x102
data 0x2000017
data 0x940638
data 0x2000000
data 0x2000000
data 0xc
data 0x1000000
data 0xfffff8f8
data 0x0
data 0x0
data 0x2ea0938
data 0x2000012
data 0x2000000
data 0xfff03
data 0x8
data 0xc8
data 0x3
data 0x100
data 0x1000000
data 0x4124000
data 0x3
data 0x2210538
data 0x2000012
data 0x2000000
data 0x0
data 0x0
data 0x0
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x400
data 0x400
data 0x400
data 0x2270538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x4f
data 0x45
data 0x38
data 0x2290338
data 0x2000012
data 0x0
data 0x1
data 0x2eb0638
data 0x0
data 0x2000012
data 0x1000000
data 0x800
data 0x0
data 0x0
data 0x100
data 0x24c0238
data 0x2000012
data 0x12
data 0x208
data 0xf
data 0x2000008
data 0x102
data 0x2000008
data 0x148
data 0x9000d7a
data 0xaf0238
data 0x2000000
data 0x1
data 0x8a0238
data 0x2000000
data 0x0
data 0x49
data 0x49
data 0x10c
data 0xf00f82d
data 0x20341
data 0xcf
data 0x2000009
data 0x9000022
data 0x20341
data 0xd0
data 0x2000009
data 0x900001e
data 0x20341
data 0xd1
data 0x2000009
data 0x900001a
data 0x20341
data 0xd2
data 0x2000009
data 0x9000016
data 0x20341
data 0xd6
data 0x2000009
data 0x9000012
data 0x20341
data 0xd8
data 0x2000009
data 0x900000e
data 0x20341
data 0xdc
data 0x2000009
data 0x900000a
data 0x20341
data 0xf1
data 0x2000009
data 0x9000006
data 0x140
data 0x9000006
data 0x208
data 0x1000000
data 0xfffffffe
data 0x200001c
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x64
data 0xf00932d
data 0x49
data 0x208
data 0xf00c92d
data 0x2000009
data 0x20341
data 0xc1
data 0x2000009
data 0x900006d
data 0x20341
data 0xc2
data 0x2000009
data 0x9000078
data 0x20341
data 0xc3
data 0x2000009
data 0x9000065
data 0x20341
data 0xc5
data 0x2000009
data 0x9000075
data 0x20341
data 0xc6
data 0x2000009
data 0x9000062
data 0x20341
data 0xc7
data 0x2000009
data 0x9000063
data 0x20341
data 0xc9
data 0x2000009
data 0x900006e
data 0x20341
data 0xca
data 0x2000009
data 0x900006f
data 0x20341
data 0xcf
data 0x2000009
data 0x900005c
data 0x20341
data 0xd0
data 0x2000009
data 0x900005d
data 0x20341
data 0xd1
data 0x2000009
data 0x9000045
data 0x20341
data 0xd2
data 0x2000009
data 0x900005a
data 0x20341
data 0xd6
data 0x2000009
data 0x9000042
data 0x20341
data 0xd8
data 0x2000009
data 0x9000057
data 0x20341
data 0xdc
data 0x2000009
data 0x900003f
data 0x20341
data 0xf1
data 0x2000009
data 0x9000054
data 0x20341
data 0xf2
data 0x2000009
data 0x900002d
data 0x20341
data 0xf3
data 0x2000009
data 0x900002e
data 0x20341
data 0xf4
data 0x2000009
data 0x900002f
data 0x20341
data 0xf5
data 0x2000009
data 0x9000035
data 0x20341
data 0xf6
data 0x2000009
data 0x9000036
data 0x20341
data 0xf7
data 0x2000009
data 0x9000037
data 0x20341
data 0xf8
data 0x2000009
data 0x9000024
data 0x20341
data 0xd4
data 0x2000009
data 0x9000039
data 0x20341
data 0xd9
data 0x2000009
data 0x900003a
data 0x20341
data 0xd7
data 0x2000009
data 0x900003b
data 0x20341
data 0xda
data 0x2000009
data 0x900003c
data 0x49
data 0x208
data 0x0
data 0x2000008
data 0x140
data 0x900fffc
data 0x208
data 0x1
data 0x2000008
data 0x140
data 0x900fff7
data 0x208
data 0x2
data 0x2000008
data 0x140
data 0x900fff2
data 0x208
data 0x3
data 0x2000008
data 0x140
data 0x900ffed
data 0x208
data 0x4
data 0x2000008
data 0x140
data 0x900ffe8
data 0x208
data 0x5
data 0x2000008
data 0x140
data 0x900ffe3
data 0x208
data 0x6
data 0x2000008
data 0x140
data 0x900ffde
data 0x208
data 0x7
data 0x2000008
data 0x140
data 0x900ffd9
data 0x208
data 0xb
data 0x2000008
data 0x140
data 0x900ffd4
data 0x208
data 0x10
data 0x2000008
data 0x140
data 0x900ffcf
data 0x208
data 0xd
data 0x2000008
data 0x140
data 0x900ffca
data 0x208
data 0xc
data 0x2000008
data 0x140
data 0x900ffc5
data 0x74
data 0x28
data 0x2b
data 0x6c
data 0x74
data 0x74
data 0x8
data 0x0
data 0x6f
data 0x74
data 0x78
data 0x64
data 0xf
data 0x78
data 0x74
data 0x8
data 0x0
data 0xe
data 0x53
data 0x64
data 0x6a
data 0x74
data 0x70
data 0x8
data 0x0
data 0x74
data 0xe
data 0x0
data 0x64
data 0xf
data 0x78
data 0x70
data 0x8
data 0x50
data 0x0
data 0x74
data 0x42
data 0x44
data 0x3c
data 0x44
data 0x6c
data 0x0
data 0x62
data 0x0
data 0x78
data 0x0
data 0x78
data 0x0
data 0x44
data 0x6c
data 0x14

; SUBROUTINE
LABEL_52:
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_8] ; addr
jmp inl[:LABEL_61] ; addr
data 0x49

; SUBROUTINE TABLE
LABEL_53:
rel :JMP_276c_0
rel :JMP_276c_1
rel :JMP_276c_2
rel :JMP_276c_3
rel :JMP_276c_4

; SUBROUTINE
JMP_276c_0:
gosub inl[:LABEL_72] ; addr
jmp_cmp !=, 0x1, stor[31], inl[:LABEL_54] ; operand, left, right, addr
gosub inl[:LABEL_69] ; addr
incr var[45][66] ; operand
LABEL_54:
return

; SUBROUTINE
JMP_276c_1:
return

; SUBROUTINE
JMP_276c_2:
return

; SUBROUTINE
JMP_276c_3:
jmp_cmp ==, 0x1, stor[31], inl[:LABEL_55] ; operand, left, right, addr
jmp_cmp &, 0x10, var[45][105], inl[:LABEL_55] ; operand, left, right, addr
mov 0x1, stor[27] ; source, dest
call Battle::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], stor[27] ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
LABEL_55:
return

; SUBROUTINE
JMP_276c_4:
return

; SUBROUTINE
LABEL_56:
jmp_cmp ==, 0x0, stor[27], inl[:LABEL_58] ; operand, left, right, addr
call Battle::scriptAnimationHasFinished, stor[0], stor[17] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[17], inl[:LABEL_58] ; operand, left, right, addr
jmp_cmp !=, 0x19, stor[27], inl[:LABEL_57] ; operand, left, right, addr
mov 0x2, stor[31] ; source, dest
mov 0x1, stor[stor[stor[0], 32], 30] ; source, dest
LABEL_57:
mov 0x0, stor[27] ; source, dest
call Battle::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
LABEL_58:
return

; SUBROUTINE
LABEL_59:
jmp_cmp !&, 0x1, var[45][105], inl[:LABEL_60] ; operand, left, right, addr
and 0xfffffffe, var[45][105] ; and, operand
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptResumeAnimation, stor[0] ; bentIndex
LABEL_60:
return
LABEL_61:
mov 0x0, stor[stor[stor[0], 32], 29] ; source, dest
mov 0x0, stor[stor[stor[0], 32], 30] ; source, dest
mov 0x0, var[45][66] ; source, dest
LABEL_62:
mov var[45][82], stor[8] ; source, dest
gosub_table stor[8], inl[:LABEL_53] ; index, table
gosub inl[:LABEL_56] ; addr
gosub inl[:LABEL_59] ; addr
jmp_cmp !=, 0x1, var[45][66], inl[:LABEL_63] ; operand, left, right, addr
decr stor[16] ; operand
jmp_cmp !=, 0x0, stor[16], inl[:LABEL_63] ; operand, left, right, addr
mov 0x0, stor[15] ; source, dest
mov 0x19, stor[27] ; source, dest
call Battle::scriptSetInterpolationEnabled, stor[0], 0x0 ; bentIndex, set
call Battle::scriptSetBentAnimationLoopState, stor[0], 0x0 ; bentIndex, loop
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], stor[27] ; bentIndex, animIndex
incr var[45][66] ; operand
LABEL_63:
yield
jmp_cmp !=, 0x5, var[45][82], inl[:LABEL_62] ; operand, left, right, addr
jmp_cmp !=, 0x2, stor[31], inl[:LABEL_64] ; operand, left, right, addr
mov 0x2, stor[stor[stor[0], 32], 30] ; source, dest
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
mov 0x10, stor[23] ; source, dest
wait stor[23] ; frames
LABEL_64:
mov 0x1, stor[23] ; source, dest
mov stor[0], stor[28] ; source, dest
mov stor[32], stor[30] ; source, dest
gosub inl[:LABEL_14] ; addr
mov stor[9], stor[29] ; source, dest
gosub inl[:LABEL_75] ; addr
mov stor[29], stor[9] ; source, dest
mov stor[9], var[45][224] ; source, dest
jmp_cmp >=, 0x0, stor[9], inl[:LABEL_66] ; operand, left, right, addr
jmp_cmp !=, 0x0, var[45][243], inl[:LABEL_66] ; operand, left, right, addr
call Battle::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
sub stor[9], stor[8] ; amount, operand
jmp_cmp <=, 0x0, stor[8], inl[:LABEL_65] ; operand, left, right, addr
mov 0x0, stor[8] ; source, dest
LABEL_65:
call Battle::scriptSetBentRawStat, stor[0], stor[8], CURRENT_HP ; bentIndex, value, statIndex
LABEL_66:
call Battle::scriptRenderDamage, stor[0], stor[9] ; bentIndex, damage
call Battle::scriptGetBentStat2, stor[0], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp >=, 0x0, stor[8], inl[:LABEL_68] ; operand, left, right, addr
jmp_cmp ==, 0x2, stor[31], inl[:LABEL_67] ; operand, left, right, addr
gosub inl[:LABEL_0] ; addr
LABEL_67:
call Battle::scriptSetInterpolationEnabled, stor[0], 0x1 ; bentIndex, set
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
wait stor[23] ; frames
gosub inl[:LABEL_22] ; addr
mov 0x0, var[45][188] ; source, dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_9] ; addr
mov 0x0, stor[8] ; source, dest
return
LABEL_68:
wait stor[23] ; frames
mov 0x1, stor[8] ; source, dest
return

; SUBROUTINE
LABEL_69:
gosub inl[:LABEL_27] ; addr
jmp_cmp >, 0x0, stor[8], inl[:LABEL_70] ; operand, left, right, addr
mov 0x1, stor[stor[stor[0], 8], 8] ; source, dest
call Battle::scriptAllocateEmptyEffectManagerChild, stor[21] ; effectIndex
mov stor[0], stor[stor[stor[0], 21], 28] ; source, dest
mov stor[0], stor[stor[stor[0], 21], 30] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[21], inl[:LABEL_71] ; scriptIndex, address
LABEL_70:
return

; FORK JMP
LABEL_71:
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x25, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
gosub inl[:LABEL_21] ; addr
call Battle::allocateBillboardSpriteEffect, stor[21], 0xfff26 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[21], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[21], 0xffffffff, 0x800, 0x800, 0x800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[21], 0xffffffff, 0x60, 0x40, 0x60 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[21], 0x1 ; effectIndex, set
call SEffe::scriptAddConstantColourScalerAttachment, stor[21], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[21], 0xc ; effectIndex, ticks
call SEffe::scriptAllocateElectricityEffect, stor[18], 0xffffffff, 0x3e8, 0x8, 0x100, 0x100, 0x161020, 0x2 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xff, 0x0, 0xc0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x1000, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x800, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xc ; effectIndex, ticks
mov 0xd, stor[23] ; source, dest
wait stor[23] ; frames
deallocate
data 0x49

; SUBROUTINE
LABEL_72:
mov 0x0, stor[31] ; source, dest
mov 0x0, stor[16] ; source, dest
call Battle::scriptGetBentSlot, stor[32], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
add 0xbd, stor[8] ; amount, operand
jmp_cmp &, 0x2, var[45][stor[8]], inl[:LABEL_73] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x10, stor[8], inl[:LABEL_73] ; operand, left, right, addr
mov var[45][89], stor[8] ; source, dest
mov inl[:LABEL_74[stor[8]]], stor[8] ; source, dest
rand 0x64, stor[9] ; bound, dest
jmp_cmp <=, stor[8], stor[9], inl[:LABEL_73] ; operand, left, right, addr
jmp_cmp ==, 0x0, var[45][83], inl[:LABEL_73] ; operand, left, right, addr
mov var[45][83], stor[8] ; source, dest
incr stor[8] ; operand
incr stor[8] ; operand
jmp_cmp >=, stor[8], var[45][89], inl[:LABEL_73] ; operand, left, right, addr
decr stor[8] ; operand
jmp_cmp !=, 0x0, var[45][66], inl[:LABEL_73] ; operand, left, right, addr
call Battle::scriptGetHitProperty, stor[32], stor[8], 0x1, stor[9] ; bentIndex, hitNum, hitPropertyIndex, value
call Battle::scriptGetBentStat, stor[0], HIT_COUNTER_FRAME_THRESHOLD, stor[27] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat, stor[0], _62, stor[11] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[27], inl[:LABEL_73] ; operand, left, right, addr
incr stor[27] ; operand
mov var[45][87], stor[8] ; source, dest
add var[45][88], stor[8] ; amount, operand
jmp_cmp >=, stor[27], stor[8], inl[:LABEL_73] ; operand, left, right, addr
mov stor[9], stor[13] ; source, dest
sub 0x3, stor[13] ; amount, operand
jmp_cmp >=, stor[27], stor[13], inl[:LABEL_73] ; operand, left, right, addr
sub stor[8], stor[13] ; amount, operand
mov 0x1, stor[16] ; source, dest
incr stor[31] ; operand
LABEL_73:
return
LABEL_74:
data 0x0
data 0x0
data 0x0
data 0x0
data 0x28
data 0x25
data 0x23
data 0x20
data 0x1e

; SUBROUTINE
LABEL_75:
jmp_cmp >, 0x0, stor[29], inl[:LABEL_80] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_80] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[9] ; source, dest
and 0xf, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_77] ; operand, left, right, addr
mov var[128 + stor[8]][0], stor[10] ; source, dest
jmp_cmp ==, 0x2, stor[10], inl[:LABEL_76] ; operand, left, right, addr
jmp_cmp ==, 0x3, stor[10], inl[:LABEL_76] ; operand, left, right, addr
and 0x3, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_77] ; operand, left, right, addr
mov 0x0, stor[29] ; source, dest
gosub inl[:LABEL_45] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_80] ; addr
LABEL_76:
and 0xc, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_77] ; operand, left, right, addr
mov 0x0, stor[29] ; source, dest
gosub inl[:LABEL_47] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_80] ; addr
LABEL_77:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[9], inl[:LABEL_78] ; operand, left, right, addr
shl 0x1, stor[29] ; shift, val
LABEL_78:
call Battle::scriptGetBentStat, stor[0], GUARD, stor[9] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_80] ; operand, left, right, addr
jmp_cmp >=, 0x0, stor[29], inl[:LABEL_79] ; operand, left, right, addr
shr 0x1, stor[29] ; shift, val
LABEL_79:
gosub inl[:LABEL_46] ; addr
mov 0x19, stor[23] ; source, dest
LABEL_80:
jmp_cmp >=, 0x3b9ac9ff, stor[29], inl[:LABEL_81] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[29] ; source, dest
LABEL_81:
return

; SUBROUTINE
LABEL_82:
call Battle::scriptSetBentDeadAndDropLoot, stor[0], 0x1 ; bentIndex, dead
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x16, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
call Battle::scriptDisableBentShadow, stor[0] ; bentIndex
call Battle::scriptAllocateMonsterDeathEffect, stor[18], stor[0], 0xfff1f, 0x0 ; effectIndex, bentIndex, spriteIndex, unused
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call Battle::scriptGetBobjModelPartCount, stor[0], stor[23] ; bobjIndex, partCount
shr 0x1, stor[23] ; shift, val
add 0x2, stor[23] ; amount, operand
call SEffe::scriptAddLifespanAttachment, stor[18], stor[23] ; effectIndex, ticks
wait stor[23] ; frames
call Battle::FUN_800cb618, stor[0], 0x0 ; bentIndex, set
gosub inl[:LABEL_134] ; addr
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_9] ; addr
return

; SUBROUTINE
LABEL_83:
mov 0x1, stor[23] ; source, dest
jmp_cmp >, 0x0, stor[32], inl[:LABEL_88] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[9] ; source, dest
shl stor[8], stor[9] ; shift, val
jmp_cmp &, stor[9], var[45][188], inl[:LABEL_88] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov var[128 + stor[8]][7], stor[9] ; source, dest
and 0xf, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_85] ; operand, left, right, addr
mov var[128 + stor[8]][0], stor[10] ; source, dest
jmp_cmp ==, 0x2, stor[10], inl[:LABEL_84] ; operand, left, right, addr
jmp_cmp ==, 0x3, stor[10], inl[:LABEL_84] ; operand, left, right, addr
and 0x3, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_85] ; operand, left, right, addr
mov 0x0, stor[32] ; source, dest
gosub inl[:LABEL_45] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_88] ; addr
LABEL_84:
and 0xc, stor[9] ; and, operand
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_85] ; operand, left, right, addr
mov 0x0, stor[32] ; source, dest
gosub inl[:LABEL_47] ; addr
mov 0x19, stor[23] ; source, dest
jmp inl[:LABEL_88] ; addr
LABEL_85:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[9], inl[:LABEL_86] ; operand, left, right, addr
shl 0x1, stor[32] ; shift, val
LABEL_86:
call Battle::scriptGetBentStat, stor[0], GUARD, stor[9] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_88] ; operand, left, right, addr
jmp_cmp >=, 0x0, stor[32], inl[:LABEL_87] ; operand, left, right, addr
shr 0x1, stor[32] ; shift, val
LABEL_87:
gosub inl[:LABEL_46] ; addr
mov 0x19, stor[23] ; source, dest
LABEL_88:
jmp_cmp >=, 0x3b9ac9ff, stor[32], inl[:LABEL_89] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[32] ; source, dest
LABEL_89:
return
data 0x148
data 0x900f45c
data 0x49
data 0x0
data 0x70341
data 0x1000000
data 0x4
data 0x500003a
data 0x900ffff
data 0x2030138
data 0x2000000
data 0x49
data 0x810438
data 0x2000000
data 0x2000018
data 0x2000019
data 0x200001a
data 0x49
data 0x148
data 0x900f342
data 0x900138
data 0x2000000
data 0x208
data 0x3
data 0x2000017
data 0x102
data 0x2000017
data 0x1420238
data 0x2000000
data 0x0
data 0x49
data 0x810438
data 0x2000000
data 0x2000018
data 0x2000019
data 0x200001a
data 0x9c0238
data 0x2000000
data 0x200001c
data 0x1420238
data 0x2000000
data 0x2
data 0x940638
data 0x2000000
data 0x200001c
data 0xf
data 0x2000008
data 0x0
data 0x0
data 0xee0738
data 0x2
data 0x2000000
data 0x0
data 0x0
data 0x0
data 0x0
data 0x5
data 0x148
data 0x900001e
data 0xef0438
data 0x2
data 0x2000000
data 0x0
data 0x3
data 0x9c0238
data 0x2000000
data 0x200001c
data 0x49
data 0x940638
data 0x2000000
data 0x1000000
data 0xffffffff
data 0x3
data 0x2000018
data 0x2000019
data 0x200001a
data 0x840238
data 0x2000000
data 0xc00
data 0x1420238
data 0x2000000
data 0x0
data 0x70203
data 0x1000000
data 0x4000000
data 0x2000007
data 0x49
data 0x208
data 0x3
data 0x2000011
data 0x208
data 0x5
data 0x2000017
data 0x102
data 0x2000017
data 0x243
data 0x2000011
data 0x900fffb
data 0x49
data 0x49
data 0xa90338
data 0x200001e
data 0x41
data 0x2000008
data 0x220
data 0x64
data 0x2000008
data 0x218
data 0x1000000
data 0xffffff00
data 0x2000008
data 0x11d
data 0x2000008
data 0x50341
data 0x1000000
data 0xfffffe00
data 0x2000008
data 0x9000009
data 0x208
data 0x1000000
data 0xfffffe00
data 0x2000008
data 0x49
data 0x2580138
data 0x2000009
data 0x148
data 0x9000053
data 0x148
data 0x9000018
data 0x20341
data 0x1
data 0x3080900
data 0x9000010
data 0x148
data 0x9000094
data 0x20341
data 0xe
data 0x2000008
data 0x9000008
data 0x10341
data 0x7
data 0x2000008
data 0x9000006
data 0x148
data 0x90000a0
data 0x153
data 0x2000009
data 0x208
data 0x0
data 0xf00cb2d
data 0x49
data 0x10c
data 0x3080900
data 0xa90338
data 0x2000000
data 0x5
data 0x3090900
data 0x208
data 0x3090900
data 0x30a0900
data 0x210
data 0x4
data 0x30a0900
data 0x20242
data 0x30a0900
data 0x900002c
data 0x208
data 0x1
data 0x3080900
data 0x231
data 0x64
data 0x30b0900
data 0x341
data 0x32
data 0x30b0900
data 0x9000012
data 0x208
data 0xf
data 0x2000008
data 0x208
data 0x5000035
data 0x30c0900
data 0x231
data 0x30c0900
data 0x200000a
data 0x208
data 0x7000a34
data 0x200001c
data 0x140
data 0x9000013
data 0x341
data 0x4b
data 0x30b0900
data 0x9000009
data 0x208
data 0x9
data 0x2000008
data 0x140
data 0x900000a
data 0x208
data 0x0
data 0x2000008
data 0x148
data 0x90000e4
data 0x208
data 0x1
data 0x3080900
data 0x49
data 0x1730338
data 0x2000000
data 0x30a0900
data 0x0
data 0x208
data 0x30a0900
data 0x200000a
data 0x208
data 0x10070a80
data 0x30b0900
data 0x210
data 0x1000000
data 0x10000
data 0x30b0900
data 0x20242
data 0x30b0900
data 0x900000f
data 0x208
data 0x30a0900
data 0x200000a
data 0x219
data 0x1000000
data 0x10000
data 0x10070a80
data 0x208
data 0x2
data 0x200000c
data 0x140
data 0x900002d
data 0xb10338
data 0x2000000
data 0x2
data 0x30a0900
data 0xb10338
data 0x2000000
data 0x6
data 0x30b0900
data 0x208
data 0x30b0900
data 0x3090900
data 0x221
data 0x2
data 0x3090900
data 0x10341
data 0x3090900
data 0x30a0900
data 0x9000013
data 0x208
data 0x30b0900
data 0x3090900
data 0x221
data 0x4
data 0x3090900
data 0x10341
data 0x3090900
data 0x30a0900
data 0x900000e
data 0x208
data 0x2
data 0x200000c
data 0x140
data 0x900000c
data 0x208
data 0x0
data 0x200000c
data 0x140
data 0x9000007
data 0x208
data 0x1
data 0x200000c
data 0x140
data 0x9000002
data 0x49
data 0x208
data 0x200000c
data 0x2000008
data 0x220
data 0x4
data 0x2000008
data 0x231
data 0x64
data 0x3090900
data 0x221
data 0x19
data 0x3090900
data 0x218
data 0x3090900
data 0x2000008
data 0x148
data 0x9000003
data 0x49
data 0x208
data 0xa08f9c7
data 0x2000008
data 0x49
data 0x10c
data 0x30c0900
data 0x208
data 0x5000033
data 0x31a0900
data 0x11c
data 0x31a0900
data 0x208
data 0x31a0900
data 0x200000a
data 0x208
data 0x7000a32
data 0x31c0900
data 0x1730338
data 0x31c0900
data 0x30a0900
data 0x0
data 0x208
data 0x30a0900
data 0x200000a
data 0x208
data 0x10070a80
data 0x30b0900
data 0x210
data 0x1000000
data 0x300
data 0x30b0900
data 0x20242
data 0x30b0900
data 0x9000009
data 0x208
data 0x31c0900
data 0x3080900
data 0x208
data 0x1
data 0x30c0900
data 0x11c
data 0x31a0900
data 0x242
data 0x31a0900
data 0x900ffe1
data 0x20341
data 0x1
data 0x30c0900
data 0x9000078
data 0x231
data 0x64
data 0x3090900
data 0x341
data 0x32
data 0x3090900
data 0x900004f
data 0xa90338
data 0x2000000
data 0x37
data 0x3090900
data 0x208
data 0x5000033
data 0x31a0900
data 0x11c
data 0x31a0900
data 0x208
data 0x31a0900
data 0x200000a
data 0x208
data 0x7000a32
data 0x31c0900
data 0xa70238
data 0x31c0900
data 0x30a0900
data 0xa90338
data 0x31c0900
data 0x5
data 0x200000a
data 0x70341
data 0x1000000
data 0x4000
data 0x200000a
data 0x9000010
data 0x208
data 0x31c0900
data 0x200000a
data 0x70341
data 0x1000000
data 0x2
data 0x3070a00
data 0x9000008
data 0x208
data 0x9
data 0x30a0900
data 0x148
data 0x900004f
data 0x20242
data 0x30b0900
data 0x900001a
data 0x1730338
data 0x31c0900
data 0x30a0900
data 0x0
data 0x208
data 0x30a0900
data 0x200000a
data 0x208
data 0x10070a80
data 0x30b0900
data 0x210
data 0x1000000
data 0xc0
data 0x30b0900
data 0x30242
data 0x30b0900
data 0x9000009
data 0x208
data 0x31c0900
data 0x3080900
data 0x208
data 0x1
data 0x30c0900
data 0x11c
data 0x31a0900
data 0x242
data 0x31a0900
data 0x900ffc5
data 0x20341
data 0x1
data 0x30c0900
data 0x9000026
data 0x208
data 0xa
data 0x2000017
data 0x208
data 0x5000033
data 0x31a0900
data 0x231
data 0x31a0900
data 0x200000a
data 0x208
data 0x7000a32
data 0x3080900
data 0x11c
data 0x2000017
data 0x20242
data 0x2000017
data 0x9000018
data 0x1730338
data 0x3080900
data 0x30a0900
data 0x0
data 0x208
data 0x30a0900
data 0x200000a
data 0x208
data 0x10070a80
data 0x30b0900
data 0x210
data 0x1000000
data 0xc0
data 0x30b0900
data 0x30242
data 0x30b0900
data 0x900ffe7
data 0x208
data 0x3080900
data 0x200001c
data 0x49
data 0x208
data 0x11
data 0x2000008
data 0x49
data 0x10c
data 0x30b0900
data 0x208
data 0x30a0900
data 0x200000a
data 0x208
data 0xa0a000d
data 0x3190900
data 0x210
data 0x3090900
data 0x3190900
data 0x20242
data 0x3190900
data 0x9000006
data 0x208
data 0x1
data 0x30b0900
data 0x49
data 0x1
data 0x2
data 0x4
data 0x20
data 0x0
data 0x2
data 0x80
data 0x40
data 0x4
data 0x0
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x50
data 0x208
data 0x4
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x0
data 0x200000a
data 0x148
data 0x900f8f5
data 0x27e0438
data 0xef
data 0x2000000
data 0x2000000
data 0x0
data 0x49
data 0xa80338
data 0x2000000
data 0x1
data 0x28
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x55
data 0x500002c
data 0x208
data 0x6
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x5
data 0x200000a
data 0x148
data 0x900f8d7
data 0x208
data 0xa
data 0x2000017
data 0x102
data 0x2000017
data 0x2f90138
data 0x2000012
data 0x2730238
data 0x2000012
data 0x1000000
data 0xfffffe00
data 0x2270538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2450638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x6
data 0xd5
data 0xfd
data 0x15
data 0x2210538
data 0x2000012
data 0x2000000
data 0x0
data 0x1000000
data 0xfffffd00
data 0x1000000
data 0xfffffe00
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x0
data 0xc00
data 0xc00
data 0x208
data 0x6
data 0x2000017
data 0x102
data 0x2000017
data 0x2450638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x14
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x14
data 0x1000000
data 0xfffffa00
data 0xc00
data 0xc00
data 0x24c0238
data 0x2000012
data 0x14
data 0x208
data 0x19
data 0x2000017
data 0x102
data 0x2000017
data 0x148
data 0x900f0dc
data 0x1420238
data 0x2000000
data 0x0
data 0x208
data 0x21
data 0x500002c
data 0x49
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x211
data 0x1
data 0x10070880
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x55
data 0x500002c
data 0x208
data 0x7
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x5
data 0x200000a
data 0x148
data 0x900f86c
data 0x208
data 0xa
data 0x2000017
data 0x102
data 0x2000017
data 0x2f90138
data 0x2000012
data 0x2730238
data 0x2000012
data 0x1000000
data 0xfffffe00
data 0x2270538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2450638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x6
data 0xfd
data 0x8b
data 0x15
data 0x2210538
data 0x2000012
data 0x2000000
data 0x0
data 0x1000000
data 0xfffffd00
data 0x1000000
data 0xfffffe00
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x0
data 0xc00
data 0xc00
data 0x208
data 0x6
data 0x2000017
data 0x102
data 0x2000017
data 0x2450638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x14
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x14
data 0x1000000
data 0xfffffa00
data 0xc00
data 0xc00
data 0x24c0238
data 0x2000012
data 0x14
data 0x208
data 0x19
data 0x2000017
data 0x102
data 0x2000017
data 0x148
data 0x900f071
data 0x1420238
data 0x2000000
data 0x0
data 0x208
data 0x21
data 0x500002c
data 0x49
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x211
data 0x4
data 0x10070880
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x55
data 0x500002c
data 0x208
data 0x8
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x5
data 0x200000a
data 0x148
data 0x900f801
data 0x208
data 0xa
data 0x2000017
data 0x102
data 0x2000017
data 0x2f90138
data 0x2000012
data 0x2730238
data 0x2000012
data 0x1000000
data 0xfffffe00
data 0x2270538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x0
data 0x0
data 0x0
data 0x2450638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x6
data 0x19
data 0x82
data 0xfd
data 0x2210538
data 0x2000012
data 0x2000000
data 0x0
data 0x1000000
data 0xfffffd00
data 0x1000000
data 0xfffffe00
data 0x2250538
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x0
data 0xc00
data 0xc00
data 0x208
data 0x6
data 0x2000017
data 0x102
data 0x2000017
data 0x2450638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x14
data 0x0
data 0x0
data 0x0
data 0x2400638
data 0x2000012
data 0x1000000
data 0xffffffff
data 0x14
data 0x1000000
data 0xfffffa00
data 0xc00
data 0xc00
data 0x24c0238
data 0x2000012
data 0x14
data 0x208
data 0x19
data 0x2000017
data 0x102
data 0x2000017
data 0x148
data 0x900f006
data 0x1420238
data 0x2000000
data 0x0
data 0x208
data 0x21
data 0x500002c
data 0x49
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x56
data 0x500002c
data 0x26f0538
data 0xeb
data 0x2000000
data 0x2000000
data 0x0
data 0x1000000
data 0x2000000
data 0x2700138
data 0x1
data 0x208
data 0x9
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x0
data 0x200000a
data 0x148
data 0x900f794
data 0x2700138
data 0x2
data 0x2700138
data 0x3
data 0x208
data 0x21
data 0x500002c
data 0x49
data 0x208
data 0xa
data 0x2000017
data 0x102
data 0x2000017
data 0x208
data 0xa
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x0
data 0x200000a
data 0x148
data 0x900f77c
data 0x20341
data 0x2000000
data 0x200001c
data 0x9000007
data 0x9c0238
data 0x2000000
data 0x200001c
data 0x1420238
data 0x2000000
data 0x10
data 0x920238
data 0x2000000
data 0x0
data 0x148
data 0x900efbb
data 0x8b0238
data 0x2000000
data 0x1
data 0x840238
data 0x2000000
data 0xc00
data 0x1420238
data 0x2000000
data 0x0
data 0xb10338
data 0x2000000
data 0x6
data 0x2000008
data 0x221
data 0x5
data 0x2000008
data 0x10242
data 0x2000008
data 0x9000006
data 0x208
data 0x1
data 0x2000008
data 0x20341
data 0x2000000
data 0x200001c
data 0x900000a
data 0x357
data 0x200001c
data 0x2
data 0x2000008
data 0x140
data 0x900000f
data 0x208
data 0x2000008
data 0x2000020
data 0x148
data 0x9000c17
data 0x148
data 0x9000c1c
data 0x20242
data 0x2000008
data 0x9000006
data 0x148
data 0x900fb98
data 0x49
data 0x208
data 0x14
data 0x2000017
data 0x102
data 0x2000017
data 0x49
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x211
data 0x10000
data 0x10070880
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x56
data 0x500002c
data 0x26f0538
data 0xeb
data 0x2000000
data 0x2000000
data 0x1
data 0x1000000
data 0x2000000
data 0x2700138
data 0x1
data 0x208
data 0xb
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x0
data 0x200000a
data 0x148
data 0x900f716
data 0x2700138
data 0x2
data 0x2700138
data 0x3
data 0x208
data 0x21
data 0x500002c
data 0x49
data 0x208
data 0xc
data 0x2000008
data 0x208
data 0x1e
data 0x2000009
data 0x208
data 0x0
data 0x200000a
data 0x148
data 0x900f703
data 0x208
data 0x1e
data 0x2000017
data 0x102
data 0x2000017
data 0x208
data 0x2000000
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x208
data 0x8d
data 0x500002c
data 0x208
data 0x1
data 0xf00cb2d
data 0x208
data 0x0
data 0x2000008
data 0x24a
data 0x2000008
data 0x9000b5d
data 0x208
data 0x21
data 0x500002c
data 0x49
ENTRYPOINT_10:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_90] ; operand, left, right, addr
jmp_cmp &, 0x2, stor[7], inl[:LABEL_90] ; operand, left, right, addr
mov stor[32], stor[9] ; source, dest
gosub inl[:LABEL_100] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_90] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], GUARD, stor[8] ; bentIndex, statIndex, value
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_91] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; and, operand
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_94] ; operand, left, right, addr
jmp_cmp &, 0x10, stor[8], inl[:LABEL_94] ; operand, left, right, addr
jmp_cmp >=, stor[8], inl[:LABEL_96[stor[32]]], inl[:LABEL_94] ; operand, left, right, addr
LABEL_90:
consume
LABEL_91:
gosub inl[:LABEL_92] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], stor[18], 0x200, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2, stor[8] ; source, dest
wait stor[8] ; frames
gosub inl[:LABEL_92] ; addr
call SEffe::scriptSetRelativeRotation, stor[18], stor[18], 0x600, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
consume

; SUBROUTINE
LABEL_92:
memcpy 0x3, stor[24], inl[:LABEL_93] ; size, src, dest
call Battle::scriptAllocateRadialGradientEffect, stor[18], 0x3, 0x2 ; effectIndex, count, type
mov 0xfffffd00, stor[8] ; source, dest
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x1, 0x200 ; effectIndex, genericIndex, value
call SEffe::scriptSetGenericEffectValue, stor[18], 0x2, 0x0 ; effectIndex, genericIndex, value
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xc8, 0x78, 0x8c ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xc, 0x1194, 0x1194, 0x1194 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0xc ; effectIndex, ticks
memcpy 0x3, inl[:LABEL_93], stor[24] ; size, src, dest
return
LABEL_93:
data 0x0
data 0x0
data 0x0
data 0x211
data 0x380
data 0x700092d
data 0x58
LABEL_94:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
or inl[:LABEL_95[stor[32]]], stor[8] ; or, operand
call Battle::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
mov var[45][stor[9]], stor[11] ; source, dest
and 0xf, stor[11] ; and, operand
mov 0x0, var[45][stor[9]] ; source, dest
or 0x380, var[45][stor[9]] ; or, operand
or stor[32], var[45][stor[9]] ; or, operand
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[32], stor[stor[stor[0], 18], 31] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 17] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_113] ; scriptIndex, address
consume
LABEL_95:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x10
data 0x20
data 0x40
data 0x80
LABEL_96:
data 0x1
data 0x2
data 0x4
data 0x8
data 0x100
data 0x20
data 0x40
data 0x80

; SUBROUTINE
LABEL_97:
mov stor[8], stor[9] ; source, dest
mov 0x0, stor[8] ; source, dest
LABEL_98:
jmp_cmp ==, stor[9], inl[:LABEL_95[stor[8]]], inl[:LABEL_99] ; operand, left, right, addr
incr stor[8] ; operand
jmp_cmp >=, 0x7, stor[8], inl[:LABEL_98] ; operand, left, right, addr
debug96 0x4, 0x8, stor[8] ; ?, ?, ?
mov 0xffffffff, stor[8] ; source, dest
LABEL_99:
return

; SUBROUTINE
LABEL_100:
mov 0x0, stor[8] ; source, dest
call Battle::scriptGetBentStat, stor[0], EQUIPMENT_STATUS_RESIST, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, inl[:LABEL_95[stor[9]]], stor[10], inl[:LABEL_101] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_101:
return
ENTRYPOINT_11:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_103] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; and, operand
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_103] ; operand, left, right, addr
gosub inl[:LABEL_97] ; addr
jmp_cmp >, 0x0, stor[8], inl[:LABEL_105] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp &, 0x80, var[45][stor[9]], inl[:LABEL_103] ; operand, left, right, addr
or 0x80, var[45][stor[9]] ; or, operand
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[0], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[8], stor[stor[stor[0], 18], 31] ; source, dest
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 17] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_113] ; scriptIndex, address
jmp_cmp ==, 0x0, var[45][183], inl[:LABEL_104] ; operand, left, right, addr
LABEL_102:
yield
jmp_cmp !=, 0x0, stor[stor[stor[0], 18], 17], inl[:LABEL_102] ; operand, left, right, addr
LABEL_103:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[8] ; source, dest
shl stor[9], stor[8] ; shift, val
neg stor[8] ; operand
decr stor[8] ; operand
and stor[8], var[45][183] ; and, operand
LABEL_104:
consume
LABEL_105:
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
call Battle::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
jmp inl[:LABEL_103] ; addr
data 0x10c
data 0x2000008
data 0x208
data 0x7000820
data 0x200001c
data 0x1730338
data 0x200001c
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x148
data 0x9000009
data 0x11b
data 0x2000008
data 0x10341
data 0x2000008
data 0x5000021
data 0x900fff2
data 0x49

; SUBROUTINE
LABEL_106:
jmp_cmp !=, 0x0, var[57], inl[:LABEL_108] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[18] ; bentIndex, statIndex, value
and 0xff, stor[18] ; and, operand
jmp_cmp ==, 0x0, stor[18], inl[:LABEL_108] ; operand, left, right, addr
jmp_cmp &, 0x1, stor[18], inl[:LABEL_107] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_108] ; operand, left, right, addr
LABEL_107:
gosub inl[:LABEL_109] ; addr
LABEL_108:
return

; SUBROUTINE
LABEL_109:
mov var[45][stor[9]], stor[31] ; source, dest
and 0xf, stor[31] ; and, operand
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
mov stor[28], stor[stor[stor[0], 18], 28] ; source, dest
mov stor[31], stor[stor[stor[0], 18], 31] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_110] ; scriptIndex, address
return

; FORK JMP
LABEL_110:
call Battle::scriptGetBentSlot, stor[28], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[8] ; source, dest
shl stor[9], stor[8] ; shift, val
or stor[8], var[45][183] ; or, operand
fork_reenter stor[28], 0xb, stor[31] ; index, entrypoint, stor[32] value
gosub inl[:LABEL_10] ; addr
deallocate

; SUBROUTINE TABLE
LABEL_111:
rel :JMP_4a3c_0
rel :JMP_4a3c_1
rel :JMP_4a3c_2
rel :JMP_4a3c_3
rel :JMP_4a3c_4
rel :JMP_4a3c_5
rel :JMP_4a3c_6
rel :JMP_4a3c_7

; SUBROUTINE TABLE
LABEL_112:
rel :JMP_4a5c_0
rel :JMP_4a5c_1
rel :JMP_4a5c_2
rel :JMP_4a5c_3
rel :JMP_4a5c_4
rel :JMP_4a5c_5
rel :JMP_4a5c_6
rel :JMP_4a5c_7

; FORK JMP
LABEL_113:
call Battle::scriptGetBentStat2, stor[28], CURRENT_HP, stor[8] ; bentIndex, statIndex, value
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_118] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[8], inl[:LABEL_114] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_118] ; operand, left, right, addr
LABEL_114:
gosub_table stor[31], inl[:LABEL_112] ; index, table
LABEL_115:
mov var[45][stor[9]], stor[11] ; source, dest
jmp_cmp !&, 0x80, stor[11], inl[:LABEL_117] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
jmp_cmp &, 0x1, stor[8], inl[:LABEL_116] ; operand, left, right, addr
jmp_cmp &, 0x40, stor[stor[stor[0], 28], 7], inl[:LABEL_117] ; operand, left, right, addr
LABEL_116:
mov stor[11], stor[13] ; source, dest
and 0xf, stor[13] ; and, operand
jmp_cmp !=, stor[13], stor[31], inl[:LABEL_118] ; operand, left, right, addr
mov stor[11], stor[13] ; source, dest
and 0xf00, stor[13] ; and, operand
jmp_cmp ==, 0xf00, stor[13], inl[:LABEL_119] ; operand, left, right, addr
gosub_table stor[31], inl[:LABEL_111] ; index, table
yield
jmp inl[:LABEL_115] ; addr
LABEL_117:
jmp_cmp ==, 0x0, var[45][stor[9]], inl[:LABEL_119] ; operand, left, right, addr
LABEL_118:
mov 0x0, stor[17] ; source, dest
yield
yield
yield
deallocate
LABEL_119:
mov 0x0, var[45][stor[9]] ; source, dest
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
call Battle::scriptSetBentStat, stor[28], stor[8], STATUS ; bentIndex, value, statIndex
gosub_table stor[31], inl[:LABEL_120] ; index, table
deallocate

; SUBROUTINE TABLE
LABEL_120:
rel :JMP_4c18_0
rel :JMP_4c18_1
rel :JMP_4c18_2
rel :JMP_4c18_3
rel :JMP_4c18_4
rel :JMP_4c18_5
rel :JMP_4c18_6
rel :JMP_4c18_7

; SUBROUTINE
JMP_4c18_0:
gosub inl[:LABEL_122] ; addr
jmp_cmp &, 0x2, var[45][245], inl[:LABEL_121] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0x9 ; bentIndex, animIndex
gosub inl[:LABEL_1] ; addr
LABEL_121:
call Battle::scriptSetBentDead, stor[28], 0x0 ; bentIndex, dead
gosub inl[:LABEL_2] ; addr
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
JMP_4c18_1:
gosub inl[:LABEL_123] ; addr
gosub inl[:LABEL_126] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x40, 0x0, 0x3c ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x40, 0x0, 0x3c ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
JMP_4c18_2:
gosub inl[:LABEL_123] ; addr
gosub inl[:LABEL_126] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x3c, 0x3c, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x3c, 0x3c, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
JMP_4c18_3:
gosub inl[:LABEL_123] ; addr
gosub inl[:LABEL_126] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x14, 0x14, 0x46 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x14, 0x14, 0x46 ; bobjIndex1, bobjIndex2, r, g, b
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
JMP_4c18_4:
gosub inl[:LABEL_123] ; addr
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
JMP_4c18_5:
gosub inl[:LABEL_123] ; addr
gosub inl[:LABEL_126] ; addr
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x1e, 0x1e, 0x1e ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x1e, 0x1e, 0x1e ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[19], 0x2 ; effectIndex, set
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[20], 0x2 ; effectIndex, set
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
JMP_4c18_6:
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
JMP_4c18_7:
gosub inl[:LABEL_123] ; addr
gosub inl[:LABEL_125] ; addr
gosub inl[:LABEL_124] ; addr
return

; SUBROUTINE
LABEL_122:
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x8, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x8 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_123:
deallocate_other stor[19] ; index
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0xa, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[18], 0xa ; effectIndex, ticks
yield
return

; SUBROUTINE
LABEL_124:
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff3d, 0xc, 0x200, 0x2, 0x100, 0x4127f00, 0x29 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x100, 0x100, 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x20 ; effectIndex, ticks
mov 0x20, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_125:
mov 0x5, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptPlaySound, 0x0, 0x2d, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
call SEffe::scriptAllocateParticleEffect, stor[18], 0xffffffff, 0xfff2d, 0x10, 0x80, 0x2, 0x800, 0x6107f00, 0x4 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[18], stor[28], 0x100, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[18], 0x28 ; effectIndex, ticks
mov 0x6, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_126:
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff26, 0x8, 0x200, 0x1, 0x200, 0x4187f00, 0x36 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[19], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[19], 0x20 ; effectIndex, ticks
call SEffe::scriptAllocateParticleEffect, stor[20], stor[28], 0xfff26, 0x8, 0x200, 0x1, 0x200, 0x4187f00, 0x36 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[20], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[20], 0xffffffff, 0x96, 0x96, 0x96 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[20], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[20], 0x20 ; effectIndex, ticks
return

; SUBROUTINE
JMP_4a5c_0:
call Battle::scriptSetBentDead, stor[28], 0x1 ; bentIndex, dead
call Battle::scriptGetLoadingBentAnimationIndex, stor[28], stor[8] ; bentIndex, animationIndex
jmp_cmp ==, 0xe, stor[8], inl[:LABEL_127] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[28], 0xe ; bentIndex, animIndex
call Battle::scriptSetBentAnimationLoopState, stor[28], 0x0 ; bentIndex, loop
LABEL_127:
call SEffe::allocateDeffTmd, stor[18], 0xfff25 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, 0xfffffe00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[18], 0xffffffff, 0x4, 0x1000, 0x1000, 0x1000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], 0xffffffff, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetEffectLightingDisableFlag, stor[18], 0x1 ; effectIndex, set
mov 0x4, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x0, stor[17] ; source, dest

; SUBROUTINE
JMP_4a3c_0:
return

; SUBROUTINE
JMP_4a5c_1:
gosub inl[:LABEL_137] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x1e, 0x0, 0x1e ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff2b, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_4a3c_1:
gosub inl[:LABEL_135] ; addr
return

; SUBROUTINE
JMP_4a5c_2:
gosub inl[:LABEL_137] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x19, 0x19, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff2f, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x180, 0x180, 0x180 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_4a3c_2:
gosub inl[:LABEL_135] ; addr
return

; SUBROUTINE
JMP_4a5c_3:
gosub inl[:LABEL_137] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x5, 0x5, 0x28 ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff33, 0x5, 0xc8, 0x11, 0x0, 0x5208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x180, 0x180, 0x180 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_4a3c_3:
jmp_cmp !&, 0x1, var[2], inl[:LABEL_128] ; operand, left, right, addr
call Battle::scriptGetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
add 0x14, stor[26] ; amount, operand
call Battle::scriptSetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
jmp inl[:LABEL_129] ; addr
LABEL_128:
call Battle::scriptGetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
sub 0x14, stor[26] ; amount, operand
call Battle::scriptSetBentPos, stor[28], stor[24], stor[25], stor[26] ; bentIndex, x, y, z
LABEL_129:
return

; SUBROUTINE
JMP_4a5c_4:
gosub inl[:LABEL_137] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff05, 0x8, 0x78, 0x20, 0x0, 0x0, 0x10 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x200, 0x200, 0x200 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffd00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call Battle::scriptSetBentStat, stor[28], 0x0, GUARD ; bentIndex, value, statIndex
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_4a3c_4:
gosub inl[:LABEL_135] ; addr
return

; SUBROUTINE
JMP_4a5c_5:
gosub inl[:LABEL_137] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x1e, 0x1e, 0x1e ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[18], 0x2 ; effectIndex, set
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff26, 0x5, 0xc8, 0x11, 0x0, 0x4208000, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0xfa, 0xfa, 0xfa ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[19], 0xffffffff, 0xa, 0x1e, 0x1e, 0x1e ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[19], 0x2 ; effectIndex, set
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_4a3c_5:
gosub inl[:LABEL_135] ; addr
return

; SUBROUTINE
JMP_4a5c_6:
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_4a3c_6:
return

; SUBROUTINE
JMP_4a5c_7:
gosub inl[:LABEL_137] ; addr
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xa, 0x0, 0x14, 0x5 ; effectIndex, parentIndex, ticks, destR, destG, destB
yield
call SEffe::scriptAllocateParticleEffect, stor[19], stor[28], 0xfff38, 0x5, 0xc8, 0x1, 0x60, 0x0, 0x14 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetRelativeRotation, stor[19], 0xffffffff, 0xa00, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[19], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
yield
mov 0x0, stor[17] ; source, dest
return

; SUBROUTINE
JMP_4a3c_7:
jmp_cmp !&, 0x40, var[45][stor[9]], inl[:LABEL_131] ; operand, left, right, addr
call Battle::scriptGetBentSlot, stor[28], stor[8], 0x0 ; bentIndex, charOrBentSlot, mode
mov 0x1, stor[10] ; source, dest
shl stor[8], stor[10] ; shift, val
call Battle::scriptGetBentStat2, stor[28], MAX_HP, stor[8] ; bentIndex, statIndex, value
div 0xa, stor[8] ; amount, operand
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_130] ; operand, left, right, addr
incr stor[8] ; operand
LABEL_130:
or stor[10], var[45][188] ; or, operand
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
xor 0x40, var[45][stor[9]] ; xor, operand
LABEL_131:
return

; SUBROUTINE
LABEL_132:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
jmp_cmp !&, 0x80, var[45][stor[9]], inl[:LABEL_133] ; operand, left, right, addr
or 0x40, var[45][stor[9]] ; or, operand
LABEL_133:
return

; SUBROUTINE
LABEL_134:
call Battle::scriptGetBentSlot, stor[0], stor[9], 0x0 ; bentIndex, charOrBentSlot, mode
add 0x81, stor[9] ; amount, operand
mov 0x0, var[45][stor[9]] ; source, dest
call Battle::scriptGetBentStat, stor[0], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
call Battle::scriptSetBentStat, stor[0], stor[8], STATUS ; bentIndex, value, statIndex
return
data 0x1730338
data 0x2000000
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x70341
data 0x1000000
data 0x80
data 0x700092d
data 0x900000c
data 0x210
data 0x1000000
data 0xffffff7f
data 0x700092d
data 0x211
data 0x10000
data 0x700092d
data 0x49
data 0x10c
data 0x2000008
data 0x208
data 0x7000820
data 0x200000a
data 0x1730338
data 0x200000a
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x70341
data 0x1000000
data 0x80
data 0x700092d
data 0x900000c
data 0x210
data 0x1000000
data 0xffffff7f
data 0x700092d
data 0x211
data 0x10000
data 0x700092d
data 0x11b
data 0x2000008
data 0x10341
data 0x2000008
data 0x5000021
data 0x900ffe8
data 0x49
data 0x1730338
data 0x2000000
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x49

; SUBROUTINE
LABEL_135:
jmp_cmp !&, var[45][stor[9]], 0x40, inl[:LABEL_136] ; operand, left, right, addr
sub 0x40, var[45][stor[9]] ; amount, operand
sub 0x100, var[45][stor[9]] ; amount, operand
and 0xf00, stor[11] ; and, operand
jmp_cmp !=, 0x0, stor[11], inl[:LABEL_136] ; operand, left, right, addr
mov 0x0, var[45][stor[9]] ; source, dest
LABEL_136:
return

; SUBROUTINE
LABEL_137:
call Battle::allocateBillboardSpriteEffect, stor[18], 0xfff26 ; effectIndex, flags
mov 0xfffffc00, stor[8] ; source, dest
gosub inl[:LABEL_138] ; addr
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, 0x3e8, 0x3e8, 0x3e8 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[18], stor[18], 0x1e, 0x1e, 0x1e, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
return

; SUBROUTINE
LABEL_138:
gosub inl[:LABEL_21] ; addr
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_X, stor[24] ; bentIndex, statIndex, value
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_Y, stor[25] ; bentIndex, statIndex, value
mul 0x64, stor[24] ; amount, operand
mul 0x64, stor[25] ; amount, operand
neg stor[25] ; operand
mov 0x0, stor[26] ; source, dest
call Battle::scriptGetBentPos, stor[28], stor[14], stor[15], stor[16] ; bentIndex, x, y, z
add stor[14], stor[24] ; amount, operand
add stor[15], stor[25] ; amount, operand
add stor[16], stor[26] ; amount, operand
return
PTR_1f98_0:
data str[<line><line><noterm>]
PTR_7674_15:
data str[What do you want to talk about?]
data 0x1f
data 0x1
PTR_7674_0:
data str[<sauto=0>"Attack items' damage."<line>"Attack items' element."<line>"How to use a multiplying item."<line>"I heard enough."]
data 0x20
data 0x4
PTR_7674_1:
data str[Select the item command.<multibox><line>Then select an item with<line>"(multi)" in the item<line>description window,<multibox><line>and select the target.<line>It's no different from<line>other items right?<multibox><line>Now, here is the <line>difference with <line>multiplying items!<multibox><line>When a multiplying item is used,<line>the button icon is displayed at<line>the bottom right of the screen.]
data 0x20
data 0xd
PTR_7674_2:
data str[<sauto=0><arrow=0>Then just hit the ` button<line>repeatedly!]
data 0x1a
data 0x2
PTR_7674_3:
data str[<sauto=0><arrow=0>Believe it or not,<line>the damage increases!]
data 0x15
data 0x2
PTR_7674_4:
data str[<sauto=0><arrow=0>Work hard and you can prolong<line>the multiplying time!]
data 0x1d
data 0x2
PTR_7674_8:
data str[<sauto=0><arrow=0>You gotta hit it!]
data 0x11
data 0x1
PTR_7674_5:
data str[Come on, try it.<line>Give it to me.]
data 0x10
data 0x2
PTR_7674_16:
data str[How's that? Wanna try <line>one more time?]
data 0x16
data 0x2
PTR_7674_6:
data str[<sauto=0>"Let me try."<line>"No, thank you."]
data 0x10
data 0x2
PTR_7674_9:
data str[An attack item's basic damage is<line>determined by the Magic Power<line>(MAT) & the attributes.<multibox><line>Here, let me tell you about MAT.<line>Frankly, an item is "magic<line>with a form."<multibox><line>So, if you have more magic power<line>the results will be greater!]
data 0x20
data 0x8
PTR_7674_10:
data str[Next are elements.<line>There are eight elements.<multibox><line>Fire, water, wind, earth, light,<line>darkness, thunder, and<line>non-elemental.<multibox><line>So, this is the point!<multibox><line>Never forget opposing<line>combinations of fire & water,<line>wind & earth, light & darkness!<multibox><line>Using the opposite attacking<line>item to the enemy's doubles<line>the damage!<multibox><line>And using an attacking item<line>with the same element halves<line>the damage!<multibox><line>Elements appear when you<line>select an enemy in battle.<multibox><line>The window color lets you<line>know which one.<multibox><line>I'll tell you about window<line>colors & attributes in <line>"Attack items' element".]
data 0x20
data 0x16
PTR_7674_11:
data str[Let me tell ya again!<multibox><line>Fire & water, wind & earth,<line>light & darkness oppose<line>each other!<multibox><line>Be efficient when you use items<line>by thinking about their<line>attributes!]
data 0x1f
data 0x7
PTR_7674_17:
data str[Well, got it?]
data 0xd
data 0x1
PTR_7674_12:
data str[<sauto=0>"Tell me again."<line>"Yeah, I definitely got it."]
data 0x1c
data 0x2
PTR_7674_13:
data str[The characters have elemental<line>properties.<line>There are eight possible.<multibox><line>Fire, water, wind, earth, light,<line>darkness, thunder, and <line>non-elemental.<multibox><line>Let me explain each of them.<multibox><line><element=1>"Fire base"<line>Window color is red. <line>The opposite is water.<multibox><line><element=2>"Water base"<line>Window color is blue.<line>The opposite is fire.<multibox><line><element=3>"Wind base"<line>Window color is green.<line>The opposite is earth.<multibox><line><element=4>"Earth base"<line>Window color is brown.<line>The opposite is wind.<multibox><line><element=5>"Light base"<line>Window color is yellow.<line>The opposite is darkness.<multibox><line><element=6>"Darkness base"<line>Window is dark blue.<line>The opposite is light.<multibox><line><element=7>"Thunder base"<line>Window is magenta.<line>There is no opposite.<multibox><line><element=8>"Non-elemental"<line>Window is gray.<line>There is no opposite.<multibox><line><element=9>Being opposite matters <line>when using an attack item.<multibox><line>I'll tell you the details about<line>opposites in<line>"Attack items' damage".]
data 0x20
data 0x24
PTR_7674_18:
data str[Well, did you get it?]
data 0x15
data 0x1
PTR_7674_14:
data str[<sauto=0>"Tell me one more time."<line>"Yeah, I got it."]
data 0x18
data 0x2
PTR_7674_19:
data str[<sauto=0>Not doing well? <line>Work hard! Strike!]
data 0x12
data 0x2
PTR_7674_20:
data str[<sauto=0>Hmmm, almost!]
data 0xd
data 0x1
PTR_7674_21:
data str[<sauto=0>Pretty good!<line>But you can do better!]
data 0x16
data 0x2
PTR_7674_22:
data str[<sauto=0>Great!<line>Perfect!]
data 0x8
data 0x2

; SUBROUTINE TABLE
LABEL_139:
rel :JMP_70d4_0
rel :JMP_70d4_1
rel :JMP_70d4_2
rel :JMP_70d4_3
rel :JMP_70d4_4
rel :JMP_70d4_5
rel :JMP_70d4_6
rel :JMP_70d4_7
rel :JMP_70d4_7
rel :JMP_70d4_7
rel :JMP_70d4_10
rel :JMP_70d4_11
rel :JMP_70d4_12
rel :JMP_70d4_13
rel :JMP_70d4_14
rel :JMP_70d4_14
rel :JMP_70d4_16
rel :JMP_70d4_17
rel :JMP_70d4_17
rel :JMP_70d4_17
rel :JMP_70d4_17
rel :JMP_70d4_17
rel :JMP_70d4_17
rel :JMP_70d4_17
rel :JMP_70d4_24
rel :JMP_70d4_24
rel :JMP_70d4_24
rel :JMP_70d4_24
ENTRYPOINT_0:
gosub inl[:LABEL_29] ; addr
call Battle::scriptAttachShadowToBentModelPart, stor[0], 0xc ; bentIndex, modelPartAttachmentIndex
mov 0x1, var[45][242] ; source, dest
mov 0x0, var[45][243] ; source, dest
mov 0x0, var[45][179] ; source, dest
mov var[34][0], stor[28] ; source, dest
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xff, stor[8] ; and, operand
mov stor[8], var[45][179] ; source, dest
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
and 0xffffff00, stor[8] ; and, operand
call Battle::scriptSetBentStat, stor[28], stor[8], STATUS ; bentIndex, value, statIndex
or 0x20, stor[7] ; or, operand

; SUBROUTINE
JMP_70d4_24:
LABEL_140:
wait_cmp &, 0x8, stor[7] ; operator, left, right
gosub inl[:LABEL_31] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_141] ; operand, left, right, addr
mov var[45][243], stor[8] ; source, dest
gosub_table stor[8], inl[:LABEL_139] ; index, table
LABEL_141:
gosub inl[:LABEL_30] ; addr
and 0xfffffff7, stor[7] ; and, operand
jmp inl[:LABEL_140] ; addr

; SUBROUTINE
JMP_70d4_17:
return
ENTRYPOINT_1:
consume
ENTRYPOINT_2:
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_8] ; addr
gosub inl[:LABEL_83] ; addr
ENTRYPOINT_3:
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_8] ; addr
jmp_cmp >=, 0x14, stor[32], inl[:LABEL_142] ; operand, left, right, addr
mov 0x14, stor[32] ; source, dest
LABEL_142:
call Battle::scriptRenderDamage, stor[0], stor[32] ; bentIndex, damage
jmp_cmp >=, 0x0, stor[32], inl[:LABEL_144] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x1 ; bentIndex, animIndex
LABEL_143:
yield
call Battle::scriptAnimationHasFinished, stor[0], stor[28] ; bentIndex, finished
jmp_cmp ==, 0x0, stor[28], inl[:LABEL_143] ; operand, left, right, addr
call Battle::scriptPauseAnimation, stor[0] ; bentIndex
call Battle::scriptSetLoadingBentAnimationIndex, stor[0], 0x0 ; bentIndex, animIndex
LABEL_144:
wait stor[23] ; frames
mov stor[0], stor[28] ; source, dest
gosub inl[:LABEL_9] ; addr
mov 0x0, stor[8] ; source, dest
consume
ENTRYPOINT_4:
gosub inl[:LABEL_82] ; addr
consume
ENTRYPOINT_5:
gosub inl[:LABEL_52] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:ENTRYPOINT_4] ; operand, left, right, addr
consume
ENTRYPOINT_6:
ENTRYPOINT_7:
ENTRYPOINT_8:
ENTRYPOINT_9:
ENTRYPOINT_12:
ENTRYPOINT_13:
ENTRYPOINT_14:
ENTRYPOINT_15:
consume

; SUBROUTINE
JMP_70d4_16:
mov 0x0, stor[8] ; source, dest
mov 0x14, stor[9] ; source, dest
gosub inl[:LABEL_146] ; addr
wait stor[9] ; frames
return
data 0xc00138
data 0x200000a
data 0xc80738
data 0x200000a
data 0x1111
data 0xa0
data 0x2a
data 0x20
data 0x1
data 0xb0800c0
data 0x102
data 0x2000017
data 0xc90138
data 0x200000a
data 0x49

; SUBROUTINE
LABEL_145:
call Scus94491BpeSegment_8002::scriptGetFreeTextboxIndex, stor[10] ; textboxIndex
call Scus94491BpeSegment_8002::scriptAddTextbox, stor[10], 0x1111, 0xa0, 0x32, 0x20, 0x2, inl[:LABEL_157[:LABEL_157[stor[8]]]] ; index, packedData, x, y, width, height, text
wait stor[23] ; frames
call Scus94491BpeSegment_8002::scriptDeallocateTextbox, stor[10] ; index
return
data 0xc00138
data 0x200000a
data 0xc80738
data 0x200000a
data 0x111
data 0xa0
data 0x42
data 0x20
data 0x4
data 0xb0800a2
data 0x140
data 0x900000c

; SUBROUTINE
LABEL_146:
call Scus94491BpeSegment_8002::scriptGetFreeTextboxIndex, stor[10] ; textboxIndex
call Scus94491BpeSegment_8002::scriptAddTextbox, stor[10], 0x111, 0xa0, 0x3a, 0x20, 0x3, inl[:LABEL_157[:LABEL_157[stor[8]]]] ; index, packedData, x, y, width, height, text
LABEL_147:
yield
call Scus94491BpeSegment_8002::scriptIsTextboxInitialized, stor[10], stor[8] ; index, initialized
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_147] ; operand, left, right, addr
return
data 0xc00138
data 0x200000a
data 0xc80738
data 0x200000a
data 0x111
data 0xa0
data 0x32
data 0x20
data 0x2
data 0xb080084
data 0x140
data 0x900ffee
data 0xc00138
data 0x200000a
data 0xc80738
data 0x200000a
data 0x111
data 0xa0
data 0x2a
data 0x20
data 0x1
data 0xb080078
data 0x140
data 0x900ffe2
data 0xc00138
data 0x200000a
data 0xc80738
data 0x200000a
data 0x111
data 0xa0
data 0x3a
data 0x20
data 0x3
data 0xb08006c
data 0x140
data 0x900ffd6

; SUBROUTINE
LABEL_148:
call Scus94491BpeSegment_8002::scriptGetFreeTextboxIndex, stor[10] ; textboxIndex
call Scus94491BpeSegment_8002::scriptAddTextbox, stor[10], 0x111, 0xa0, 0x3a, 0x20, 0x3, inl[:LABEL_157[:LABEL_157[stor[8]]]] ; index, packedData, x, y, width, height, text
call Scus94491BpeSegment_8002::scriptAddSelectionTextbox, stor[10], 0x0, 0x1 ; index, minSelectionIndex, maxSelectionIndex
LABEL_149:
yield
call Scus94491BpeSegment_8002::scriptGetTextboxSelectionIndex, stor[10], stor[8] ; index, selectionIndex
jmp_cmp >, 0x0, stor[8], inl[:LABEL_149] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_150:
call Scus94491BpeSegment_8002::scriptGetFreeTextboxIndex, stor[10] ; textboxIndex
call Scus94491BpeSegment_8002::scriptAddTextbox, stor[10], 0x111, 0xa0, 0x42, 0x20, 0x4, inl[:LABEL_157[:LABEL_157[stor[8]]]] ; index, packedData, x, y, width, height, text
call Scus94491BpeSegment_8002::scriptAddSelectionTextbox, stor[10], 0x0, 0x3 ; index, minSelectionIndex, maxSelectionIndex
jmp inl[:LABEL_149] ; addr

; SUBROUTINE
LABEL_151:
call Scus94491BpeSegment_8002::scriptGetFreeTextboxIndex, stor[10] ; textboxIndex
call Scus94491BpeSegment_8002::scriptAddTextbox, stor[10], 0x101, 0xa0, 0x3a, 0x20, 0x3, inl[:LABEL_157[:LABEL_157[stor[8]]]] ; index, packedData, x, y, width, height, text
call Battle::scriptRenderBattleHudBackground, 0xa0, 0x3a, 0x130, 0x30, 0x8 ; x, y, width, height, colourIndex
LABEL_152:
yield
call Scus94491BpeSegment_8002::scriptGetTextboxElement, stor[10], stor[27] ; index, value
gosub inl[:LABEL_153] ; addr
call Scus94491BpeSegment_8002::scriptIsTextboxInitialized, stor[10], stor[8] ; index, initialized
jmp_cmp !=, 0x0, stor[8], inl[:LABEL_152] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_153:
jmp_cmp <=, 0x9, stor[27], inl[:LABEL_154] ; operand, left, right, addr
jmp_cmp ==, 0x0, stor[27], inl[:LABEL_154] ; operand, left, right, addr
mov inl[:LABEL_156[stor[27]]], stor[27] ; source, dest
jmp inl[:LABEL_155] ; addr
LABEL_154:
mov 0x8, stor[27] ; source, dest
LABEL_155:
call Battle::scriptRenderBattleHudBackground, 0xa0, 0x3a, 0x130, 0x30, stor[27] ; x, y, width, height, colourIndex
return
LABEL_156:
data 0x8
data 0x7
data 0x0
data 0x6
data 0x1
data 0x5
data 0x2
data 0x4
data 0x3
LABEL_157:
rel :PTR_7674_0
rel :PTR_7674_1
rel :PTR_7674_2
rel :PTR_7674_3
rel :PTR_7674_4
rel :PTR_7674_5
rel :PTR_7674_6
rel :PTR_7674_5
rel :PTR_7674_8
rel :PTR_7674_9
rel :PTR_7674_10
rel :PTR_7674_11
rel :PTR_7674_12
rel :PTR_7674_13
rel :PTR_7674_14
rel :PTR_7674_15
rel :PTR_7674_16
rel :PTR_7674_17
rel :PTR_7674_18
rel :PTR_7674_19
rel :PTR_7674_20
rel :PTR_7674_21
rel :PTR_7674_22

; SUBROUTINE
JMP_70d4_0:
mov 0x1, var[45][242] ; source, dest
mov var[34][0], stor[28] ; source, dest
or 0x20, stor[7] ; or, operand
mov 0x1, var[45][243] ; source, dest
gosub inl[:LABEL_160] ; addr
return

; SUBROUTINE
JMP_70d4_1:
mov 0xf, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x0, stor[8] ; source, dest
gosub inl[:LABEL_150] ; addr
or 0x20, stor[7] ; or, operand
mov inl[:LABEL_158[stor[8]]], var[45][243] ; source, dest
return
LABEL_158:
data 0xc
data 0xd
data 0x2
data 0xb

; SUBROUTINE
JMP_70d4_2:
mov 0x9, var[45][202] ; source, dest
call Battle::scriptLoadDeff, 0xc3, stor[0], stor[0], 0x0, 0x2000000 ; flagsAndIndex, bentIndex, p2, scriptEntrypoint, type
mov 0x1, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
call Battle::scriptAllocateEmptyEffectManagerChild, stor[19] ; effectIndex
mov 0x64, stor[stor[stor[0], 19], 8] ; source, dest
mov 0x0, stor[stor[stor[0], 19], 9] ; source, dest
mov 0x2, stor[stor[stor[0], 19], 12] ; source, dest
mov 0x0, stor[stor[stor[0], 19], 10] ; source, dest
mov 0x0, stor[stor[stor[0], 19], 14] ; source, dest
call Battle::scriptTickDeffLoadingStage, 0x1 ; loadingStage
call Battle::scriptTickDeffLoadingStage, 0x2 ; loadingStage
mov 0x1e, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptLoadSameScriptAndJump, stor[19], inl[:LABEL_170] ; scriptIndex, address

; SUBROUTINE
JMP_70d4_3:
mov 0x2, stor[8] ; source, dest
mov 0x15, stor[23] ; source, dest
gosub inl[:LABEL_145] ; addr

; SUBROUTINE
JMP_70d4_4:
mov 0x3, stor[8] ; source, dest
mov 0x15, stor[23] ; source, dest
gosub inl[:LABEL_145] ; addr

; SUBROUTINE
JMP_70d4_5:
mov 0x4, stor[8] ; source, dest
mov 0x15, stor[23] ; source, dest
gosub inl[:LABEL_145] ; addr
mov 0x8, stor[8] ; source, dest
mov 0x15, stor[23] ; source, dest
gosub inl[:LABEL_145] ; addr
deallocate_other stor[19] ; index
call Battle::scriptTickDeffLoadingStage, 0x3 ; loadingStage

; SUBROUTINE
JMP_70d4_6:
mov 0x5, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
or 0x20, stor[stor[stor[0], 28], 7] ; or, operand
mov 0x9, var[45][243] ; source, dest
call Battle::scriptGiveItem, id[lod:burn_out], reg[0] ; itemId, itemGiven
return

; SUBROUTINE
JMP_70d4_7:
data 0x13
data 0x14
data 0x15
data 0x16

; SUBROUTINE
JMP_70d4_10:
mov var[45][180], stor[8] ; source, dest
mov inl[:JMP_70d4_7[stor[8]]], stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x10, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x6, stor[8] ; source, dest
gosub inl[:LABEL_148] ; addr
gosub inl[:LABEL_159] ; addr
jmp_cmp !=, 0x0, stor[8], inl[:JMP_70d4_1] ; operand, left, right, addr
or 0x20, stor[stor[stor[0], 28], 7] ; or, operand
mov 0x9, var[45][243] ; source, dest
call Battle::scriptGiveItem, 0xc3, stor[8] ; itemId, itemGiven
return

; SUBROUTINE
JMP_70d4_11:
gosub inl[:LABEL_166] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptGetBentStat, stor[28], STATUS, stor[8] ; bentIndex, statIndex, value
or var[45][179], stor[8] ; or, operand
call Battle::scriptSetBentStat, stor[28], stor[8], STATUS ; bentIndex, value, statIndex
call Battle::scriptSetPostBattleAction, 0x5 ; action
return

; SUBROUTINE
JMP_70d4_12:
mov 0x9, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
gosub inl[:LABEL_159] ; addr
mov 0xa, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
gosub inl[:LABEL_159] ; addr
mov 0xb, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
gosub inl[:LABEL_159] ; addr
mov 0x11, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0xc, stor[8] ; source, dest
gosub inl[:LABEL_148] ; addr
gosub inl[:LABEL_159] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:JMP_70d4_12] ; operand, left, right, addr
jmp inl[:JMP_70d4_1] ; addr

; SUBROUTINE
JMP_70d4_13:
mov 0xd, stor[8] ; source, dest
gosub inl[:LABEL_151] ; addr
gosub inl[:LABEL_159] ; addr
mov 0x12, stor[8] ; source, dest
gosub inl[:LABEL_146] ; addr
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0xe, stor[8] ; source, dest
gosub inl[:LABEL_148] ; addr
gosub inl[:LABEL_159] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:JMP_70d4_13] ; operand, left, right, addr
jmp inl[:JMP_70d4_1] ; addr

; SUBROUTINE
JMP_70d4_14:
return

; SUBROUTINE
LABEL_159:
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
; Take random items and back them up into the reg storage until there are no items left.
; Only handles up to 100 items, but who's gonna hack in more than 100 items and do the use item tutorial?
LABEL_160:
mov 0, stor[10] ; loop counter
LABEL_161:
call Battle::scriptTakeItem, null, reg[stor[10]] ; itemId, itemTaken
jmp_cmp ==, null, reg[stor[10]], inl[:LABEL_162] ; operand, left, right, addr
incr stor[10] ; operand
jmp_cmp >, 100, stor[10], inl[:LABEL_161] ; operand, left, right, addr
LABEL_162:
return

; SUBROUTINE
LABEL_166:
mov 0x0, stor[10] ; source, dest
LABEL_167:
jmp_cmp ==, null, reg[stor[10]], inl[:LABEL_169] ; operand, left, right, addr
call Battle::scriptGiveItem, reg[stor[10]], reg[stor[10]] ; itemId, itemGiven
incr stor[10] ; operand
jmp_cmp >, 100, stor[10], inl[:LABEL_167] ; operand, left, right, addr
LABEL_169:
return

; FORK JMP
LABEL_170:
mov 0x1, stor[17] ; source, dest
LABEL_171:
mul 0xffffffff, stor[17] ; amount, operand
jmp_cmp ==, 0x1, stor[17], inl[:LABEL_172] ; operand, left, right, addr
call Battle::scriptRenderButtonPressHudElement, 0x24, 0x50, 0x2a, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x23, 0x4c, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
jmp inl[:LABEL_173] ; addr
LABEL_172:
call Battle::scriptRenderButtonPressHudElement, 0x24, 0x50, 0x2e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x21, 0x4c, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
LABEL_173:
mov var[2], stor[31] ; source, dest
and 0x1, stor[31] ; and, operand
jmp_cmp ==, 0x0, stor[31], inl[:LABEL_174] ; operand, left, right, addr
rand 0x3, stor[31] ; bound, dest
jmp_cmp !=, 0x0, stor[31], inl[:LABEL_176] ; operand, left, right, addr
LABEL_174:
mov 0x0, stor[11] ; source, dest
LABEL_175:
gosub inl[:LABEL_177] ; addr
yield
jmp inl[:LABEL_171] ; addr
LABEL_176:
mov 0x1, stor[11] ; source, dest
incr stor[9] ; operand
incr stor[10] ; operand
add stor[12], stor[8] ; amount, operand
jmp inl[:LABEL_175] ; addr

; SUBROUTINE
LABEL_177:
mov stor[8], stor[25] ; source, dest
mov stor[25], stor[24] ; source, dest
mod 0xa, stor[24] ; amount, operand
sub stor[24], stor[25] ; amount, operand
add 0x3, stor[24] ; amount, operand
call Battle::scriptRenderButtonPressHudElement, stor[24], 0x78, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
mov stor[25], stor[24] ; source, dest
mod 0x64, stor[24] ; amount, operand
sub stor[24], stor[25] ; amount, operand
div 0xa, stor[24] ; amount, operand
add 0x3, stor[24] ; amount, operand
call Battle::scriptRenderButtonPressHudElement, stor[24], 0x70, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
mov stor[25], stor[24] ; source, dest
mod 0x3e8, stor[24] ; amount, operand
div 0x64, stor[24] ; amount, operand
add 0x3, stor[24] ; amount, operand
call Battle::scriptRenderButtonPressHudElement, stor[24], 0x68, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0xd, 0x80, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x68, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1e, 0x64, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x68, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x18, 0x64, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1a, 0x64, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x68, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x70, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x70, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x70, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x78, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x78, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x78, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x80, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x80, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x80, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1f, 0x8c, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x19, 0x8c, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1b, 0x8c, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
return
